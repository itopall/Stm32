
03_Reg_446_Take_Data_from_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000310  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d4  080004dc  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  080004dc  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000020  080004dc  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000104dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000009f8  00000000  00000000  0001050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000027b  00000000  00000000  00010f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000088  00000000  00000000  00011180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000060  00000000  00000000  00011208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000bbb2  00000000  00000000  00011268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000a9b  00000000  00000000  0001ce1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000421bc  00000000  00000000  0001d8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0005fa71  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000118  00000000  00000000  0005fac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stabstr      0000003f  00000000  00000000  0005fbdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004bc 	.word	0x080004bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004bc 	.word	0x080004bc

08000204 <delay>:
#include "stm32f4xx.h"

void delay(uint32_t time)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	while(--time)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3b01      	subs	r3, #1
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1f9      	bne.n	800020c <delay+0x8>
		;
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <RCC_Config>:

void RCC_Config()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	//HSE aktif et
	RCC -> CR |= (1 << 16); //hseon bitini enable ettik
 800022c:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <RCC_Config+0xbc>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a2c      	ldr	r2, [pc, #176]	; (80002e4 <RCC_Config+0xbc>)
 8000232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000236:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & (1 << 17)))
 8000238:	bf00      	nop
 800023a:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <RCC_Config+0xbc>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <RCC_Config+0x12>
		;

	//Gücü aktifleþtirdik ve voltaj regülatörünü seçtik
	RCC -> APB1ENR |= 1 << 28;
 8000246:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <RCC_Config+0xbc>)
 8000248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024a:	4a26      	ldr	r2, [pc, #152]	; (80002e4 <RCC_Config+0xbc>)
 800024c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000250:	6413      	str	r3, [r2, #64]	; 0x40
	PWR -> CR |= (3 << 14);
 8000252:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <RCC_Config+0xc0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a24      	ldr	r2, [pc, #144]	; (80002e8 <RCC_Config+0xc0>)
 8000258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800025c:	6013      	str	r3, [r2, #0]

	//Flash ayarlarýný yaptýk Prefetch enable | instruction cache enable | data cache enable | latency 5
	FLASH -> ACR |= ((1 << 8) | (1 << 9) | (1 << 10) | (5 << 0));
 800025e:	4b23      	ldr	r3, [pc, #140]	; (80002ec <RCC_Config+0xc4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a22      	ldr	r2, [pc, #136]	; (80002ec <RCC_Config+0xc4>)
 8000264:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000268:	f043 0305 	orr.w	r3, r3, #5
 800026c:	6013      	str	r3, [r2, #0]

	RCC -> CFGR &= ~(1 << 4);
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <RCC_Config+0xbc>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <RCC_Config+0xbc>)
 8000274:	f023 0310 	bic.w	r3, r3, #16
 8000278:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= 5 << 10;
 800027a:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <RCC_Config+0xbc>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <RCC_Config+0xbc>)
 8000280:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000284:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= 4 << 13;
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <RCC_Config+0xbc>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <RCC_Config+0xbc>)
 800028c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000290:	6093      	str	r3, [r2, #8]


	// Pll m,n,p deðerlerini girdik
	RCC -> PLLCFGR |= (4 << 0 | 168 << 6 | 2 << 16);
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <RCC_Config+0xbc>)
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <RCC_Config+0xbc>)
 8000298:	f443 330a 	orr.w	r3, r3, #141312	; 0x22800
 800029c:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 80002a0:	6053      	str	r3, [r2, #4]

	//pll aktifleþtirildi
	RCC -> CR |= 1 << 24;
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <RCC_Config+0xbc>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <RCC_Config+0xbc>)
 80002a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ac:	6013      	str	r3, [r2, #0]
	while (!(RCC -> CR & (1 << 25)))
 80002ae:	bf00      	nop
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <RCC_Config+0xbc>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f9      	beq.n	80002b0 <RCC_Config+0x88>
		;

	//Source olarak pll kullandýk
	RCC -> CFGR |= 2 << 0;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <RCC_Config+0xbc>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <RCC_Config+0xbc>)
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6093      	str	r3, [r2, #8]
	while (!(RCC -> CFGR & (2 << 2)))
 80002c8:	bf00      	nop
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <RCC_Config+0xbc>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	f003 0308 	and.w	r3, r3, #8
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f9      	beq.n	80002ca <RCC_Config+0xa2>
		;

}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40007000 	.word	0x40007000
 80002ec:	40023c00 	.word	0x40023c00

080002f0 <GPIO_Config>:


void GPIO_Config()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= (5 << 0);
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <GPIO_Config+0x48>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <GPIO_Config+0x48>)
 80002fa:	f043 0305 	orr.w	r3, r3, #5
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA -> MODER |= (1 << 10); // output yaptik
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <GPIO_Config+0x4c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <GPIO_Config+0x4c>)
 8000306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030a:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER |= 0x00000000;
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <GPIO_Config+0x4c>)
 800030e:	4a0b      	ldr	r2, [pc, #44]	; (800033c <GPIO_Config+0x4c>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	6053      	str	r3, [r2, #4]
	GPIOA -> OSPEEDR |= (1 << 10 | 1 << 11);
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <GPIO_Config+0x4c>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a08      	ldr	r2, [pc, #32]	; (800033c <GPIO_Config+0x4c>)
 800031a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800031e:	6093      	str	r3, [r2, #8]
	GPIOA -> PUPDR |= (1 << 10);
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <GPIO_Config+0x4c>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a05      	ldr	r2, [pc, #20]	; (800033c <GPIO_Config+0x4c>)
 8000326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800032a:	60d3      	str	r3, [r2, #12]

}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40023800 	.word	0x40023800
 800033c:	40020000 	.word	0x40020000

08000340 <main>:
int count  = 0;
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

	RCC_Config();
 8000344:	f7ff ff70 	bl	8000228 <RCC_Config>
	GPIO_Config();
 8000348:	f7ff ffd2 	bl	80002f0 <GPIO_Config>
  while (1)
  {
	  if(GPIOC -> IDR & 1 << 13)
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <main+0x64>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000354:	2b00      	cmp	r3, #0
 8000356:	d00e      	beq.n	8000376 <main+0x36>
	  {
		  while(GPIOC -> IDR & 1 << 13)
 8000358:	bf00      	nop
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <main+0x64>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f9      	bne.n	800035a <main+0x1a>
			  ;
		  delay(1000000);
 8000366:	4810      	ldr	r0, [pc, #64]	; (80003a8 <main+0x68>)
 8000368:	f7ff ff4c 	bl	8000204 <delay>
		  ++count;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <main+0x6c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <main+0x6c>)
 8000374:	6013      	str	r3, [r2, #0]
	  }
	  if(count % 2 == 1)
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <main+0x6c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	bfb8      	it	lt
 8000382:	425b      	neglt	r3, r3
 8000384:	2b01      	cmp	r3, #1
 8000386:	d106      	bne.n	8000396 <main+0x56>
		  GPIOA -> BSRR |= 1 << 5;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <main+0x70>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <main+0x70>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	e7da      	b.n	800034c <main+0xc>
	  	  //GPIOA -> ODR |= 1 << 5;
	  else
		  GPIOA -> BSRR |= (1 << 5) << 16;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <main+0x70>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <main+0x70>)
 800039c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a0:	6193      	str	r3, [r2, #24]
	  if(GPIOC -> IDR & 1 << 13)
 80003a2:	e7d3      	b.n	800034c <main+0xc>
 80003a4:	40020800 	.word	0x40020800
 80003a8:	000f4240 	.word	0x000f4240
 80003ac:	2000001c 	.word	0x2000001c
 80003b0:	40020000 	.word	0x40020000

080003b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003ba:	e003      	b.n	80003c4 <LoopCopyDataInit>

080003bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003c2:	3104      	adds	r1, #4

080003c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003cc:	d3f6      	bcc.n	80003bc <CopyDataInit>
  ldr  r2, =_sbss
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003d0:	e002      	b.n	80003d8 <LoopFillZerobss>

080003d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d4:	f842 3b04 	str.w	r3, [r2], #4

080003d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003dc:	d3f9      	bcc.n	80003d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003de:	f000 f813 	bl	8000408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e2:	f000 f847 	bl	8000474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e6:	f7ff ffab 	bl	8000340 <main>
  bx  lr    
 80003ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003f0:	080004dc 	.word	0x080004dc
  ldr  r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003f8:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80003fc:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000400:	20000020 	.word	0x20000020

08000404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC_IRQHandler>
	...

08000408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <SystemInit+0x60>)
 800040e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <SystemInit+0x60>)
 8000414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <SystemInit+0x64>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <SystemInit+0x64>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <SystemInit+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <SystemInit+0x64>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <SystemInit+0x64>)
 8000434:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800043c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <SystemInit+0x64>)
 8000440:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <SystemInit+0x68>)
 8000442:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <SystemInit+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a08      	ldr	r2, [pc, #32]	; (800046c <SystemInit+0x64>)
 800044a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800044e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <SystemInit+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <SystemInit+0x60>)
 8000458:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800045c:	609a      	str	r2, [r3, #8]
#endif
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	e000ed00 	.word	0xe000ed00
 800046c:	40023800 	.word	0x40023800
 8000470:	24003010 	.word	0x24003010

08000474 <__libc_init_array>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4d0d      	ldr	r5, [pc, #52]	; (80004ac <__libc_init_array+0x38>)
 8000478:	4c0d      	ldr	r4, [pc, #52]	; (80004b0 <__libc_init_array+0x3c>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	2600      	movs	r6, #0
 8000480:	42a6      	cmp	r6, r4
 8000482:	d109      	bne.n	8000498 <__libc_init_array+0x24>
 8000484:	4d0b      	ldr	r5, [pc, #44]	; (80004b4 <__libc_init_array+0x40>)
 8000486:	4c0c      	ldr	r4, [pc, #48]	; (80004b8 <__libc_init_array+0x44>)
 8000488:	f000 f818 	bl	80004bc <_init>
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	2600      	movs	r6, #0
 8000492:	42a6      	cmp	r6, r4
 8000494:	d105      	bne.n	80004a2 <__libc_init_array+0x2e>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f855 3b04 	ldr.w	r3, [r5], #4
 800049c:	4798      	blx	r3
 800049e:	3601      	adds	r6, #1
 80004a0:	e7ee      	b.n	8000480 <__libc_init_array+0xc>
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	3601      	adds	r6, #1
 80004aa:	e7f2      	b.n	8000492 <__libc_init_array+0x1e>
 80004ac:	080004d4 	.word	0x080004d4
 80004b0:	080004d4 	.word	0x080004d4
 80004b4:	080004d4 	.word	0x080004d4
 80004b8:	080004d8 	.word	0x080004d8

080004bc <_init>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr

080004c8 <_fini>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr
