
02_Reg_Led_blink_446_ATO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  08000484  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000484  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  08000484  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY
  9 .debug_info   000009e3  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000232  00000000  00000000  00010e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000080  00000000  00000000  000110d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00011150  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000453  00000000  00000000  000111a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000411  00000000  00000000  000115fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00011a0c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000f4  00000000  00000000  00011a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00011b7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000464 	.word	0x08000464

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000464 	.word	0x08000464

08000204 <RCC_Config>:
#define PLL_M 	4 // Pll_M degeri sabit olarak Atadik
#define PLL_N 	180 // Pll_N degeri sabit olarak Atadik
#define PLL_P		2	// Pll_P degeri sabit olarak Atadik

void RCC_Config(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC -> CR |= 1 << 16;
 8000208:	4a2c      	ldr	r2, [pc, #176]	; (80002bc <RCC_Config+0xb8>)
 800020a:	4b2c      	ldr	r3, [pc, #176]	; (80002bc <RCC_Config+0xb8>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000212:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & (1 << 17)));
 8000214:	bf00      	nop
 8000216:	4b29      	ldr	r3, [pc, #164]	; (80002bc <RCC_Config+0xb8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f9      	beq.n	8000216 <RCC_Config+0x12>

	RCC -> APB1ENR |= 1 << 28;
 8000222:	4a26      	ldr	r2, [pc, #152]	; (80002bc <RCC_Config+0xb8>)
 8000224:	4b25      	ldr	r3, [pc, #148]	; (80002bc <RCC_Config+0xb8>)
 8000226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800022c:	6413      	str	r3, [r2, #64]	; 0x40
	PWR -> CR |= 3 << 14;
 800022e:	4a24      	ldr	r2, [pc, #144]	; (80002c0 <RCC_Config+0xbc>)
 8000230:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <RCC_Config+0xbc>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000238:	6013      	str	r3, [r2, #0]

	FLASH -> ACR |= (1 << 8 | 1 << 9 | 1 << 10 | 5 << 0);
 800023a:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <RCC_Config+0xc0>)
 800023c:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <RCC_Config+0xc0>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000244:	f043 0305 	orr.w	r3, r3, #5
 8000248:	6013      	str	r3, [r2, #0]

	RCC -> CFGR &=  ~(1 << 4);
 800024a:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <RCC_Config+0xb8>)
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <RCC_Config+0xb8>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	f023 0310 	bic.w	r3, r3, #16
 8000254:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= 5 << 10;
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <RCC_Config+0xb8>)
 8000258:	4b18      	ldr	r3, [pc, #96]	; (80002bc <RCC_Config+0xb8>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000260:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= 4 << 13;
 8000262:	4a16      	ldr	r2, [pc, #88]	; (80002bc <RCC_Config+0xb8>)
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <RCC_Config+0xb8>)
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800026c:	6093      	str	r3, [r2, #8]

	RCC -> PLLCFGR |= (PLL_M << 0 | PLL_N << 6 | PLL_P << 16);
 800026e:	4a13      	ldr	r2, [pc, #76]	; (80002bc <RCC_Config+0xb8>)
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <RCC_Config+0xb8>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	f443 330b 	orr.w	r3, r3, #142336	; 0x22c00
 8000278:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 800027c:	6053      	str	r3, [r2, #4]

	RCC -> CR |= 1 << 24;
 800027e:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <RCC_Config+0xb8>)
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <RCC_Config+0xb8>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000288:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & (1 << 25)));
 800028a:	bf00      	nop
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <RCC_Config+0xb8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <RCC_Config+0x88>

	RCC -> CFGR |= (2 << 0);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <RCC_Config+0xb8>)
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <RCC_Config+0xb8>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6093      	str	r3, [r2, #8]
	while(!(RCC -> CFGR & (2 << 2)));
 80002a4:	bf00      	nop
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <RCC_Config+0xb8>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	f003 0308 	and.w	r3, r3, #8
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <RCC_Config+0xa2>

}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40007000 	.word	0x40007000
 80002c4:	40023c00 	.word	0x40023c00

080002c8 <GPIO_Config>:

void GPIO_Config(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= (1 << 0);
 80002cc:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <GPIO_Config+0x34>)
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <GPIO_Config+0x34>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA -> MODER |= (1 << 10);
 80002d8:	4a09      	ldr	r2, [pc, #36]	; (8000300 <GPIO_Config+0x38>)
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <GPIO_Config+0x38>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e2:	6013      	str	r3, [r2, #0]

	GPIOA -> OTYPER = 0;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <GPIO_Config+0x38>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	605a      	str	r2, [r3, #4]
	GPIOA -> OSPEEDR = 0;
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <GPIO_Config+0x38>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020000 	.word	0x40020000

08000304 <main>:

int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
	RCC_Config();
 800030a:	f7ff ff7b 	bl	8000204 <RCC_Config>
	GPIO_Config();
 800030e:	f7ff ffdb 	bl	80002c8 <GPIO_Config>
  	while(1)
	{
			GPIOA -> ODR |= (1<<5);// set PA5 pin
 8000312:	4a10      	ldr	r2, [pc, #64]	; (8000354 <main+0x50>)
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <main+0x50>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	6153      	str	r3, [r2, #20]
			for(int i = 0;i < 100000; ++i);
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	e002      	b.n	800032a <main+0x26>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3301      	adds	r3, #1
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <main+0x54>)
 800032e:	4293      	cmp	r3, r2
 8000330:	ddf8      	ble.n	8000324 <main+0x20>
			GPIOA -> ODR &= ~(1<<5); // reset PA5 pin
 8000332:	4a08      	ldr	r2, [pc, #32]	; (8000354 <main+0x50>)
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <main+0x50>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f023 0320 	bic.w	r3, r3, #32
 800033c:	6153      	str	r3, [r2, #20]
			for(int i = 0;i < 100000; ++i);
 800033e:	2300      	movs	r3, #0
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	e002      	b.n	800034a <main+0x46>
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	3301      	adds	r3, #1
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	4a02      	ldr	r2, [pc, #8]	; (8000358 <main+0x54>)
 800034e:	4293      	cmp	r3, r2
 8000350:	ddf8      	ble.n	8000344 <main+0x40>
			GPIOA -> ODR |= (1<<5);// set PA5 pin
 8000352:	e7de      	b.n	8000312 <main+0xe>
 8000354:	40020000 	.word	0x40020000
 8000358:	0001869f 	.word	0x0001869f

0800035c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800035c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000394 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000360:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000362:	e003      	b.n	800036c <LoopCopyDataInit>

08000364 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000366:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000368:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800036a:	3104      	adds	r1, #4

0800036c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800036c:	480b      	ldr	r0, [pc, #44]	; (800039c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000370:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000372:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000374:	d3f6      	bcc.n	8000364 <CopyDataInit>
  ldr  r2, =_sbss
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000378:	e002      	b.n	8000380 <LoopFillZerobss>

0800037a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800037a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800037c:	f842 3b04 	str.w	r3, [r2], #4

08000380 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000382:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000384:	d3f9      	bcc.n	800037a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000386:	f000 f813 	bl	80003b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800038a:	f000 f847 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800038e:	f7ff ffb9 	bl	8000304 <main>
  bx  lr    
 8000392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000394:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000398:	08000484 	.word	0x08000484
  ldr  r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80003a8:	2000001c 	.word	0x2000001c

080003ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b4:	4a16      	ldr	r2, [pc, #88]	; (8000410 <SystemInit+0x60>)
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <SystemInit+0x60>)
 80003b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003c4:	4a13      	ldr	r2, [pc, #76]	; (8000414 <SystemInit+0x64>)
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <SystemInit+0x64>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <SystemInit+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003d6:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <SystemInit+0x64>)
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <SystemInit+0x64>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <SystemInit+0x64>)
 80003e8:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <SystemInit+0x68>)
 80003ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003ec:	4a09      	ldr	r2, [pc, #36]	; (8000414 <SystemInit+0x64>)
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <SystemInit+0x64>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <SystemInit+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SystemInit+0x60>)
 8000400:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000404:	609a      	str	r2, [r3, #8]
#endif
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	e000ed00 	.word	0xe000ed00
 8000414:	40023800 	.word	0x40023800
 8000418:	24003010 	.word	0x24003010

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	4e0d      	ldr	r6, [pc, #52]	; (8000454 <__libc_init_array+0x38>)
 8000420:	4c0d      	ldr	r4, [pc, #52]	; (8000458 <__libc_init_array+0x3c>)
 8000422:	1ba4      	subs	r4, r4, r6
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	2500      	movs	r5, #0
 8000428:	42a5      	cmp	r5, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	4e0b      	ldr	r6, [pc, #44]	; (800045c <__libc_init_array+0x40>)
 800042e:	4c0c      	ldr	r4, [pc, #48]	; (8000460 <__libc_init_array+0x44>)
 8000430:	f000 f818 	bl	8000464 <_init>
 8000434:	1ba4      	subs	r4, r4, r6
 8000436:	10a4      	asrs	r4, r4, #2
 8000438:	2500      	movs	r5, #0
 800043a:	42a5      	cmp	r5, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000444:	4798      	blx	r3
 8000446:	3501      	adds	r5, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800044e:	4798      	blx	r3
 8000450:	3501      	adds	r5, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
