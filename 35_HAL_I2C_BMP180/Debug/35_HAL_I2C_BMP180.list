
35_HAL_I2C_BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004204  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e8  080043e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f0  080043f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08004404  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004404  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d988  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba1  00000000  00000000  0002d9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002f568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214d0  00000000  00000000  000308a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9ef  00000000  00000000  00051d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca602  00000000  00000000  0005f767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00129d69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d8  00000000  00000000  00129dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080043b4 	.word	0x080043b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080043b4 	.word	0x080043b4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2uiz>:
 80009f4:	004a      	lsls	r2, r1, #1
 80009f6:	d211      	bcs.n	8000a1c <__aeabi_d2uiz+0x28>
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009fc:	d211      	bcs.n	8000a22 <__aeabi_d2uiz+0x2e>
 80009fe:	d50d      	bpl.n	8000a1c <__aeabi_d2uiz+0x28>
 8000a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d40e      	bmi.n	8000a28 <__aeabi_d2uiz+0x34>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_d2uiz+0x3a>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2f>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a3c:	bf24      	itt	cs
 8000a3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a46:	d90d      	bls.n	8000a64 <__aeabi_d2f+0x30>
 8000a48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a5c:	bf08      	it	eq
 8000a5e:	f020 0001 	biceq.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a68:	d121      	bne.n	8000aae <__aeabi_d2f+0x7a>
 8000a6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a6e:	bfbc      	itt	lt
 8000a70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	4770      	bxlt	lr
 8000a76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7e:	f1c2 0218 	rsb	r2, r2, #24
 8000a82:	f1c2 0c20 	rsb	ip, r2, #32
 8000a86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8e:	bf18      	it	ne
 8000a90:	f040 0001 	orrne.w	r0, r0, #1
 8000a94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa0:	ea40 000c 	orr.w	r0, r0, ip
 8000aa4:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aac:	e7cc      	b.n	8000a48 <__aeabi_d2f+0x14>
 8000aae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab2:	d107      	bne.n	8000ac4 <__aeabi_d2f+0x90>
 8000ab4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab8:	bf1e      	ittt	ne
 8000aba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000abe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac2:	4770      	bxne	lr
 8000ac4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000acc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b96e 	b.w	8000dc8 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	468c      	mov	ip, r1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8083 	bne.w	8000c1a <__udivmoddi4+0x116>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4617      	mov	r7, r2
 8000b18:	d947      	bls.n	8000baa <__udivmoddi4+0xa6>
 8000b1a:	fab2 f282 	clz	r2, r2
 8000b1e:	b142      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b20:	f1c2 0020 	rsb	r0, r2, #32
 8000b24:	fa24 f000 	lsr.w	r0, r4, r0
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	4097      	lsls	r7, r2
 8000b2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b30:	4094      	lsls	r4, r2
 8000b32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fbbc f6f8 	udiv	r6, ip, r8
 8000b3c:	fa1f fe87 	uxth.w	lr, r7
 8000b40:	fb08 c116 	mls	r1, r8, r6, ip
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb06 f10e 	mul.w	r1, r6, lr
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d909      	bls.n	8000b64 <__udivmoddi4+0x60>
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b56:	f080 8119 	bcs.w	8000d8c <__udivmoddi4+0x288>
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	f240 8116 	bls.w	8000d8c <__udivmoddi4+0x288>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	443b      	add	r3, r7
 8000b64:	1a5b      	subs	r3, r3, r1
 8000b66:	b2a4      	uxth	r4, r4
 8000b68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b78:	45a6      	cmp	lr, r4
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x8c>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b82:	f080 8105 	bcs.w	8000d90 <__udivmoddi4+0x28c>
 8000b86:	45a6      	cmp	lr, r4
 8000b88:	f240 8102 	bls.w	8000d90 <__udivmoddi4+0x28c>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	443c      	add	r4, r7
 8000b90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b94:	eba4 040e 	sub.w	r4, r4, lr
 8000b98:	2600      	movs	r6, #0
 8000b9a:	b11d      	cbz	r5, 8000ba4 <__udivmoddi4+0xa0>
 8000b9c:	40d4      	lsrs	r4, r2
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba4:	4631      	mov	r1, r6
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	b902      	cbnz	r2, 8000bae <__udivmoddi4+0xaa>
 8000bac:	deff      	udf	#255	; 0xff
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d150      	bne.n	8000c58 <__udivmoddi4+0x154>
 8000bb6:	1bcb      	subs	r3, r1, r7
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f f887 	uxth.w	r8, r7
 8000bc0:	2601      	movs	r6, #1
 8000bc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bc6:	0c21      	lsrs	r1, r4, #16
 8000bc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0xe4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0xe2>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	f200 80e9 	bhi.w	8000db8 <__udivmoddi4+0x2b4>
 8000be6:	4684      	mov	ip, r0
 8000be8:	1ac9      	subs	r1, r1, r3
 8000bea:	b2a3      	uxth	r3, r4
 8000bec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bf4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bf8:	fb08 f800 	mul.w	r8, r8, r0
 8000bfc:	45a0      	cmp	r8, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x10c>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x10a>
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	f200 80d9 	bhi.w	8000dc0 <__udivmoddi4+0x2bc>
 8000c0e:	4618      	mov	r0, r3
 8000c10:	eba4 0408 	sub.w	r4, r4, r8
 8000c14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c18:	e7bf      	b.n	8000b9a <__udivmoddi4+0x96>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0x12e>
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	f000 80b1 	beq.w	8000d86 <__udivmoddi4+0x282>
 8000c24:	2600      	movs	r6, #0
 8000c26:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f683 	clz	r6, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d14a      	bne.n	8000cd0 <__udivmoddi4+0x1cc>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0x140>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80b8 	bhi.w	8000db4 <__udivmoddi4+0x2b0>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0103 	sbc.w	r1, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	468c      	mov	ip, r1
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d0a8      	beq.n	8000ba4 <__udivmoddi4+0xa0>
 8000c52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c56:	e7a5      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000c58:	f1c2 0320 	rsb	r3, r2, #32
 8000c5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c60:	4097      	lsls	r7, r2
 8000c62:	fa01 f002 	lsl.w	r0, r1, r2
 8000c66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6a:	40d9      	lsrs	r1, r3
 8000c6c:	4330      	orrs	r0, r6
 8000c6e:	0c03      	lsrs	r3, r0, #16
 8000c70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c74:	fa1f f887 	uxth.w	r8, r7
 8000c78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb06 f108 	mul.w	r1, r6, r8
 8000c84:	4299      	cmp	r1, r3
 8000c86:	fa04 f402 	lsl.w	r4, r4, r2
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x19c>
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c92:	f080 808d 	bcs.w	8000db0 <__udivmoddi4+0x2ac>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 808a 	bls.w	8000db0 <__udivmoddi4+0x2ac>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	443b      	add	r3, r7
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b281      	uxth	r1, r0
 8000ca4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb0:	fb00 f308 	mul.w	r3, r0, r8
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x1c4>
 8000cb8:	1879      	adds	r1, r7, r1
 8000cba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cbe:	d273      	bcs.n	8000da8 <__udivmoddi4+0x2a4>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d971      	bls.n	8000da8 <__udivmoddi4+0x2a4>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	4439      	add	r1, r7
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cce:	e778      	b.n	8000bc2 <__udivmoddi4+0xbe>
 8000cd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000cd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000cd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cdc:	431c      	orrs	r4, r3
 8000cde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ce2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ce6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	0c3b      	lsrs	r3, r7, #16
 8000cf2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf6:	fa1f f884 	uxth.w	r8, r4
 8000cfa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d02:	fb09 fa08 	mul.w	sl, r9, r8
 8000d06:	458a      	cmp	sl, r1
 8000d08:	fa02 f206 	lsl.w	r2, r2, r6
 8000d0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x220>
 8000d12:	1861      	adds	r1, r4, r1
 8000d14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d18:	d248      	bcs.n	8000dac <__udivmoddi4+0x2a8>
 8000d1a:	458a      	cmp	sl, r1
 8000d1c:	d946      	bls.n	8000dac <__udivmoddi4+0x2a8>
 8000d1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d22:	4421      	add	r1, r4
 8000d24:	eba1 010a 	sub.w	r1, r1, sl
 8000d28:	b2bf      	uxth	r7, r7
 8000d2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d36:	fb00 f808 	mul.w	r8, r0, r8
 8000d3a:	45b8      	cmp	r8, r7
 8000d3c:	d907      	bls.n	8000d4e <__udivmoddi4+0x24a>
 8000d3e:	19e7      	adds	r7, r4, r7
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d22e      	bcs.n	8000da4 <__udivmoddi4+0x2a0>
 8000d46:	45b8      	cmp	r8, r7
 8000d48:	d92c      	bls.n	8000da4 <__udivmoddi4+0x2a0>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	4427      	add	r7, r4
 8000d4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d52:	eba7 0708 	sub.w	r7, r7, r8
 8000d56:	fba0 8902 	umull	r8, r9, r0, r2
 8000d5a:	454f      	cmp	r7, r9
 8000d5c:	46c6      	mov	lr, r8
 8000d5e:	4649      	mov	r1, r9
 8000d60:	d31a      	bcc.n	8000d98 <__udivmoddi4+0x294>
 8000d62:	d017      	beq.n	8000d94 <__udivmoddi4+0x290>
 8000d64:	b15d      	cbz	r5, 8000d7e <__udivmoddi4+0x27a>
 8000d66:	ebb3 020e 	subs.w	r2, r3, lr
 8000d6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d72:	40f2      	lsrs	r2, r6
 8000d74:	ea4c 0202 	orr.w	r2, ip, r2
 8000d78:	40f7      	lsrs	r7, r6
 8000d7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d7e:	2600      	movs	r6, #0
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e70b      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e9      	b.n	8000b64 <__udivmoddi4+0x60>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6fd      	b.n	8000b90 <__udivmoddi4+0x8c>
 8000d94:	4543      	cmp	r3, r8
 8000d96:	d2e5      	bcs.n	8000d64 <__udivmoddi4+0x260>
 8000d98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7df      	b.n	8000d64 <__udivmoddi4+0x260>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e7d2      	b.n	8000d4e <__udivmoddi4+0x24a>
 8000da8:	4660      	mov	r0, ip
 8000daa:	e78d      	b.n	8000cc8 <__udivmoddi4+0x1c4>
 8000dac:	4681      	mov	r9, r0
 8000dae:	e7b9      	b.n	8000d24 <__udivmoddi4+0x220>
 8000db0:	4666      	mov	r6, ip
 8000db2:	e775      	b.n	8000ca0 <__udivmoddi4+0x19c>
 8000db4:	4630      	mov	r0, r6
 8000db6:	e74a      	b.n	8000c4e <__udivmoddi4+0x14a>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	4439      	add	r1, r7
 8000dbe:	e713      	b.n	8000be8 <__udivmoddi4+0xe4>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	e724      	b.n	8000c10 <__udivmoddi4+0x10c>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <BMP180_Init>:
#include "BMP180.h"



void BMP180_Init()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_ADDRESS_WRITE, 1, 100000) != HAL_OK)
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <BMP180_Init+0x28>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	21ee      	movs	r1, #238	; 0xee
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <BMP180_Init+0x2c>)
 8000dd8:	f001 fe66 	bl	8002aa8 <HAL_I2C_IsDeviceReady>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <BMP180_Init+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2120      	movs	r1, #32
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <BMP180_Init+0x30>)
 8000de8:	f001 f9e0 	bl	80021ac <HAL_GPIO_WritePin>

	BMP180_Get_Calib_Value();
 8000dec:	f000 f808 	bl	8000e00 <BMP180_Get_Calib_Value>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	000186a0 	.word	0x000186a0
 8000df8:	20000088 	.word	0x20000088
 8000dfc:	40020000 	.word	0x40020000

08000e00 <BMP180_Get_Calib_Value>:


void BMP180_Get_Calib_Value()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af04      	add	r7, sp, #16
	uint8_t caliBuff[BMP180_CALIBRATION_VALUE_LENGTH] = {0};
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	821a      	strh	r2, [r3, #16]
	int i = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]

	//burada device'ın hafızasından okuma yapıyoruz.
	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_ADDRESS_READ, BMP180_DEVICE_START_ADDRESS, 1, caliBuff, BMP180_CALIBRATION_VALUE_LENGTH, 100000);
 8000e1e:	4bb0      	ldr	r3, [pc, #704]	; (80010e0 <BMP180_Get_Calib_Value+0x2e0>)
 8000e20:	9302      	str	r3, [sp, #8]
 8000e22:	2316      	movs	r3, #22
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	22aa      	movs	r2, #170	; 0xaa
 8000e2e:	21ef      	movs	r1, #239	; 0xef
 8000e30:	48ac      	ldr	r0, [pc, #688]	; (80010e4 <BMP180_Get_Calib_Value+0x2e4>)
 8000e32:	f001 fc13 	bl	800265c <HAL_I2C_Mem_Read>

	//caliBuff[i] << 8 => MSB bitini oluşturuyor. caliBuff[i + 1] LSB bitlerini oluşturuyor.
	AC1 = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2; //16 bitlik değere datasheet'de yazdığı için dedik
 8000e36:	1d3a      	adds	r2, r7, #4
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3301      	adds	r3, #1
 8000e46:	f107 0120 	add.w	r1, r7, #32
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4ba4      	ldr	r3, [pc, #656]	; (80010e8 <BMP180_Get_Calib_Value+0x2e8>)
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	61fb      	str	r3, [r7, #28]
	AC2 = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000e60:	1d3a      	adds	r2, r7, #4
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	f107 0120 	add.w	r1, r7, #32
 8000e74:	440b      	add	r3, r1
 8000e76:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	4b9a      	ldr	r3, [pc, #616]	; (80010ec <BMP180_Get_Calib_Value+0x2ec>)
 8000e82:	801a      	strh	r2, [r3, #0]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	3302      	adds	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
	AC3 = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000e8a:	1d3a      	adds	r2, r7, #4
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	f107 0120 	add.w	r1, r7, #32
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b91      	ldr	r3, [pc, #580]	; (80010f0 <BMP180_Get_Calib_Value+0x2f0>)
 8000eac:	801a      	strh	r2, [r3, #0]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
	AC4 = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000eb4:	1d3a      	adds	r2, r7, #4
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	f107 0120 	add.w	r1, r7, #32
 8000ec8:	440b      	add	r3, r1
 8000eca:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	4b87      	ldr	r3, [pc, #540]	; (80010f4 <BMP180_Get_Calib_Value+0x2f4>)
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	3302      	adds	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
	AC5 = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3301      	adds	r3, #1
 8000eee:	f107 0120 	add.w	r1, r7, #32
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b7e      	ldr	r3, [pc, #504]	; (80010f8 <BMP180_Get_Calib_Value+0x2f8>)
 8000f00:	801a      	strh	r2, [r3, #0]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3302      	adds	r3, #2
 8000f06:	61fb      	str	r3, [r7, #28]
	AC6 = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000f08:	1d3a      	adds	r2, r7, #4
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	f107 0120 	add.w	r1, r7, #32
 8000f1c:	440b      	add	r3, r1
 8000f1e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	4b74      	ldr	r3, [pc, #464]	; (80010fc <BMP180_Get_Calib_Value+0x2fc>)
 8000f2a:	801a      	strh	r2, [r3, #0]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	61fb      	str	r3, [r7, #28]
	B1 	= (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000f32:	1d3a      	adds	r2, r7, #4
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	f107 0120 	add.w	r1, r7, #32
 8000f46:	440b      	add	r3, r1
 8000f48:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b6b      	ldr	r3, [pc, #428]	; (8001100 <BMP180_Get_Calib_Value+0x300>)
 8000f54:	801a      	strh	r2, [r3, #0]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3302      	adds	r3, #2
 8000f5a:	61fb      	str	r3, [r7, #28]
	B2  = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000f5c:	1d3a      	adds	r2, r7, #4
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f107 0120 	add.w	r1, r7, #32
 8000f70:	440b      	add	r3, r1
 8000f72:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	4b61      	ldr	r3, [pc, #388]	; (8001104 <BMP180_Get_Calib_Value+0x304>)
 8000f7e:	801a      	strh	r2, [r3, #0]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	3302      	adds	r3, #2
 8000f84:	61fb      	str	r3, [r7, #28]
	MB  = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	f107 0120 	add.w	r1, r7, #32
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	4b58      	ldr	r3, [pc, #352]	; (8001108 <BMP180_Get_Calib_Value+0x308>)
 8000fa8:	801a      	strh	r2, [r3, #0]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3302      	adds	r3, #2
 8000fae:	61fb      	str	r3, [r7, #28]
	MC  = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000fb0:	1d3a      	adds	r2, r7, #4
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f107 0120 	add.w	r1, r7, #32
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b4e      	ldr	r3, [pc, #312]	; (800110c <BMP180_Get_Calib_Value+0x30c>)
 8000fd2:	801a      	strh	r2, [r3, #0]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]
	MD  = (int16_t)((caliBuff[i] << 8) | caliBuff[i + 1]); i += 2;
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f107 0120 	add.w	r1, r7, #32
 8000fee:	440b      	add	r3, r1
 8000ff0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b45      	ldr	r3, [pc, #276]	; (8001110 <BMP180_Get_Calib_Value+0x310>)
 8000ffc:	801a      	strh	r2, [r3, #0]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3302      	adds	r3, #2
 8001002:	61fb      	str	r3, [r7, #28]

	if (AC1 == 0x0000 || AC1 == 0xFFFF)
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <BMP180_Get_Calib_Value+0x2e8>)
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <BMP180_Get_Calib_Value+0x21a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2120      	movs	r1, #32
 8001012:	4840      	ldr	r0, [pc, #256]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 8001014:	f001 f8ca 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 8001018:	e7fe      	b.n	8001018 <BMP180_Get_Calib_Value+0x218>
	}
	if (AC2 == 0x0000 || AC2 == 0xFFFF)
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <BMP180_Get_Calib_Value+0x2ec>)
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <BMP180_Get_Calib_Value+0x230>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2120      	movs	r1, #32
 8001028:	483a      	ldr	r0, [pc, #232]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 800102a:	f001 f8bf 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 800102e:	e7fe      	b.n	800102e <BMP180_Get_Calib_Value+0x22e>
	}
	if (AC3 == 0x0000 || AC3 == 0xFFFF)
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <BMP180_Get_Calib_Value+0x2f0>)
 8001032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d105      	bne.n	8001046 <BMP180_Get_Calib_Value+0x246>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2120      	movs	r1, #32
 800103e:	4835      	ldr	r0, [pc, #212]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 8001040:	f001 f8b4 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 8001044:	e7fe      	b.n	8001044 <BMP180_Get_Calib_Value+0x244>
	}
	if (AC4 == 0x0000 || AC4 == 0xFFFF)
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <BMP180_Get_Calib_Value+0x2f4>)
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d105      	bne.n	800105c <BMP180_Get_Calib_Value+0x25c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2120      	movs	r1, #32
 8001054:	482f      	ldr	r0, [pc, #188]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 8001056:	f001 f8a9 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 800105a:	e7fe      	b.n	800105a <BMP180_Get_Calib_Value+0x25a>
	}
	if (AC5 == 0x0000 || AC5 == 0xFFFF)
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <BMP180_Get_Calib_Value+0x2f8>)
 800105e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d105      	bne.n	8001072 <BMP180_Get_Calib_Value+0x272>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2120      	movs	r1, #32
 800106a:	482a      	ldr	r0, [pc, #168]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 800106c:	f001 f89e 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 8001070:	e7fe      	b.n	8001070 <BMP180_Get_Calib_Value+0x270>
	}
	if (AC6 == 0x0000 || AC6 == 0xFFFF)
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <BMP180_Get_Calib_Value+0x2fc>)
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d105      	bne.n	8001088 <BMP180_Get_Calib_Value+0x288>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2120      	movs	r1, #32
 8001080:	4824      	ldr	r0, [pc, #144]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 8001082:	f001 f893 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 8001086:	e7fe      	b.n	8001086 <BMP180_Get_Calib_Value+0x286>
	}
	if (B1 == 0x0000 || B1 == 0xFFFF)
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <BMP180_Get_Calib_Value+0x300>)
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <BMP180_Get_Calib_Value+0x29e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2120      	movs	r1, #32
 8001096:	481f      	ldr	r0, [pc, #124]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 8001098:	f001 f888 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 800109c:	e7fe      	b.n	800109c <BMP180_Get_Calib_Value+0x29c>
	}
	if (B2 == 0x0000 || B2 == 0xFFFF)
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <BMP180_Get_Calib_Value+0x304>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d105      	bne.n	80010b4 <BMP180_Get_Calib_Value+0x2b4>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	4819      	ldr	r0, [pc, #100]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 80010ae:	f001 f87d 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 80010b2:	e7fe      	b.n	80010b2 <BMP180_Get_Calib_Value+0x2b2>
	}
	if (MB == 0x0000 || MB == 0xFFFF)
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <BMP180_Get_Calib_Value+0x308>)
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <BMP180_Get_Calib_Value+0x2ca>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	2120      	movs	r1, #32
 80010c2:	4814      	ldr	r0, [pc, #80]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 80010c4:	f001 f872 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 80010c8:	e7fe      	b.n	80010c8 <BMP180_Get_Calib_Value+0x2c8>
	}
	if (MC == 0x0000 || MC == 0xFFFF)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <BMP180_Get_Calib_Value+0x30c>)
 80010cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d121      	bne.n	8001118 <BMP180_Get_Calib_Value+0x318>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2120      	movs	r1, #32
 80010d8:	480e      	ldr	r0, [pc, #56]	; (8001114 <BMP180_Get_Calib_Value+0x314>)
 80010da:	f001 f867 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 80010de:	e7fe      	b.n	80010de <BMP180_Get_Calib_Value+0x2de>
 80010e0:	000186a0 	.word	0x000186a0
 80010e4:	20000088 	.word	0x20000088
 80010e8:	20000032 	.word	0x20000032
 80010ec:	20000062 	.word	0x20000062
 80010f0:	20000064 	.word	0x20000064
 80010f4:	20000050 	.word	0x20000050
 80010f8:	20000048 	.word	0x20000048
 80010fc:	20000034 	.word	0x20000034
 8001100:	2000007a 	.word	0x2000007a
 8001104:	20000066 	.word	0x20000066
 8001108:	20000060 	.word	0x20000060
 800110c:	2000007c 	.word	0x2000007c
 8001110:	20000030 	.word	0x20000030
 8001114:	40020000 	.word	0x40020000
	}
	if (MD == 0x0000 || MD == 0xFFFF)
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <BMP180_Get_Calib_Value+0x338>)
 800111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <BMP180_Get_Calib_Value+0x32e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2120      	movs	r1, #32
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <BMP180_Get_Calib_Value+0x33c>)
 8001128:	f001 f840 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 800112c:	e7fe      	b.n	800112c <BMP180_Get_Calib_Value+0x32c>
	}
}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000030 	.word	0x20000030
 800113c:	40020000 	.word	0x40020000

08001140 <BMP180_Get_Temperature>:

void BMP180_Get_Temperature()
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	af00      	add	r7, sp, #0
	BMP180_Get_Uncompensated_Temperature();
 8001144:	f000 fa3e 	bl	80015c4 <BMP180_Get_Uncompensated_Temperature>
	tX1 = (int32_t)((unCompTemperature - AC6) * AC5 / pow(2.,15.));
 8001148:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <BMP180_Get_Temperature+0x108>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	461a      	mov	r2, r3
 8001150:	4b3e      	ldr	r3, [pc, #248]	; (800124c <BMP180_Get_Temperature+0x10c>)
 8001152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	4a3d      	ldr	r2, [pc, #244]	; (8001250 <BMP180_Get_Temperature+0x110>)
 800115a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9a2 	bl	80004ac <__aeabi_i2d>
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <BMP180_Get_Temperature+0x114>)
 800116e:	f7ff fb31 	bl	80007d4 <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fc13 	bl	80009a4 <__aeabi_d2iz>
 800117e:	4603      	mov	r3, r0
 8001180:	4a35      	ldr	r2, [pc, #212]	; (8001258 <BMP180_Get_Temperature+0x118>)
 8001182:	6013      	str	r3, [r2, #0]
	tX2 = (int32_t)(MC * pow(2., 11.) /(tX1 + MD));
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <BMP180_Get_Temperature+0x11c>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f98e 	bl	80004ac <__aeabi_i2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b32      	ldr	r3, [pc, #200]	; (8001260 <BMP180_Get_Temperature+0x120>)
 8001196:	f7ff f9f3 	bl	8000580 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4614      	mov	r4, r2
 80011a0:	461d      	mov	r5, r3
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <BMP180_Get_Temperature+0x124>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <BMP180_Get_Temperature+0x118>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f97b 	bl	80004ac <__aeabi_i2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff fb09 	bl	80007d4 <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fbeb 	bl	80009a4 <__aeabi_d2iz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a25      	ldr	r2, [pc, #148]	; (8001268 <BMP180_Get_Temperature+0x128>)
 80011d2:	6013      	str	r3, [r2, #0]
	if (!tX1 && !MD)
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <BMP180_Get_Temperature+0x118>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10a      	bne.n	80011f2 <BMP180_Get_Temperature+0xb2>
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <BMP180_Get_Temperature+0x124>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <BMP180_Get_Temperature+0xb2>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2120      	movs	r1, #32
 80011ea:	4820      	ldr	r0, [pc, #128]	; (800126c <BMP180_Get_Temperature+0x12c>)
 80011ec:	f000 ffde 	bl	80021ac <HAL_GPIO_WritePin>
		while(1);
 80011f0:	e7fe      	b.n	80011f0 <BMP180_Get_Temperature+0xb0>
	}
	tB5 = tX1 + tX2;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <BMP180_Get_Temperature+0x118>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <BMP180_Get_Temperature+0x128>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <BMP180_Get_Temperature+0x130>)
 80011fe:	6013      	str	r3, [r2, #0]
	temperature = ((tB5 + 8) / pow(2., 4.) * .1);
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <BMP180_Get_Temperature+0x130>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3308      	adds	r3, #8
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f950 	bl	80004ac <__aeabi_i2d>
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <BMP180_Get_Temperature+0x134>)
 8001212:	f7ff fadf 	bl	80007d4 <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	a308      	add	r3, pc, #32	; (adr r3, 8001240 <BMP180_Get_Temperature+0x100>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff f9ac 	bl	8000580 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fc00 	bl	8000a34 <__aeabi_d2f>
 8001234:	4603      	mov	r3, r0
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <BMP180_Get_Temperature+0x138>)
 8001238:	6013      	str	r3, [r2, #0]
}
 800123a:	bf00      	nop
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	bf00      	nop
 8001240:	9999999a 	.word	0x9999999a
 8001244:	3fb99999 	.word	0x3fb99999
 8001248:	20000078 	.word	0x20000078
 800124c:	20000034 	.word	0x20000034
 8001250:	20000048 	.word	0x20000048
 8001254:	40e00000 	.word	0x40e00000
 8001258:	20000084 	.word	0x20000084
 800125c:	2000007c 	.word	0x2000007c
 8001260:	40a00000 	.word	0x40a00000
 8001264:	20000030 	.word	0x20000030
 8001268:	20000058 	.word	0x20000058
 800126c:	40020000 	.word	0x40020000
 8001270:	20000068 	.word	0x20000068
 8001274:	40300000 	.word	0x40300000
 8001278:	20000040 	.word	0x20000040

0800127c <BMP180_Get_Pressure>:

void BMP180_Get_Pressure()
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	af00      	add	r7, sp, #0
	BMP180_Get_Uncompensated_Pressure();
 8001280:	f000 f9d6 	bl	8001630 <BMP180_Get_Uncompensated_Pressure>
	pB6 = tB5 - 4000;
 8001284:	4bb7      	ldr	r3, [pc, #732]	; (8001564 <BMP180_Get_Pressure+0x2e8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800128c:	461a      	mov	r2, r3
 800128e:	4bb6      	ldr	r3, [pc, #728]	; (8001568 <BMP180_Get_Pressure+0x2ec>)
 8001290:	601a      	str	r2, [r3, #0]
	pX1 = (pB2*(pB6 * pB6 / pow(2., 12.))) / pow(2., 11);
 8001292:	4bb6      	ldr	r3, [pc, #728]	; (800156c <BMP180_Get_Pressure+0x2f0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8f8 	bl	800048c <__aeabi_ui2d>
 800129c:	4604      	mov	r4, r0
 800129e:	460d      	mov	r5, r1
 80012a0:	4bb1      	ldr	r3, [pc, #708]	; (8001568 <BMP180_Get_Pressure+0x2ec>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4ab0      	ldr	r2, [pc, #704]	; (8001568 <BMP180_Get_Pressure+0x2ec>)
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f8ed 	bl	800048c <__aeabi_ui2d>
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4bae      	ldr	r3, [pc, #696]	; (8001570 <BMP180_Get_Pressure+0x2f4>)
 80012b8:	f7ff fa8c 	bl	80007d4 <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4620      	mov	r0, r4
 80012c2:	4629      	mov	r1, r5
 80012c4:	f7ff f95c 	bl	8000580 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4ba7      	ldr	r3, [pc, #668]	; (8001574 <BMP180_Get_Pressure+0x2f8>)
 80012d6:	f7ff fa7d 	bl	80007d4 <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fb5f 	bl	80009a4 <__aeabi_d2iz>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4aa3      	ldr	r2, [pc, #652]	; (8001578 <BMP180_Get_Pressure+0x2fc>)
 80012ea:	6013      	str	r3, [r2, #0]
	pX2 = AC2 * pB6 / pow(2., 11.);
 80012ec:	4ba3      	ldr	r3, [pc, #652]	; (800157c <BMP180_Get_Pressure+0x300>)
 80012ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b9c      	ldr	r3, [pc, #624]	; (8001568 <BMP180_Get_Pressure+0x2ec>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	fb03 f302 	mul.w	r3, r3, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f8c5 	bl	800048c <__aeabi_ui2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b9b      	ldr	r3, [pc, #620]	; (8001574 <BMP180_Get_Pressure+0x2f8>)
 8001308:	f7ff fa64 	bl	80007d4 <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fb46 	bl	80009a4 <__aeabi_d2iz>
 8001318:	4603      	mov	r3, r0
 800131a:	4a99      	ldr	r2, [pc, #612]	; (8001580 <BMP180_Get_Pressure+0x304>)
 800131c:	6013      	str	r3, [r2, #0]
	pX3 = pX1 + pX2;
 800131e:	4b96      	ldr	r3, [pc, #600]	; (8001578 <BMP180_Get_Pressure+0x2fc>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b97      	ldr	r3, [pc, #604]	; (8001580 <BMP180_Get_Pressure+0x304>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a96      	ldr	r2, [pc, #600]	; (8001584 <BMP180_Get_Pressure+0x308>)
 800132a:	6013      	str	r3, [r2, #0]
	pB3 = (((AC1 * 4 + pX3) << (uint8_t)BMP180_OSS_Value) + 2) / 4;
 800132c:	4b96      	ldr	r3, [pc, #600]	; (8001588 <BMP180_Get_Pressure+0x30c>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	009a      	lsls	r2, r3, #2
 8001334:	4b93      	ldr	r3, [pc, #588]	; (8001584 <BMP180_Get_Pressure+0x308>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	3302      	adds	r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	da00      	bge.n	8001344 <BMP180_Get_Pressure+0xc8>
 8001342:	3303      	adds	r3, #3
 8001344:	109b      	asrs	r3, r3, #2
 8001346:	461a      	mov	r2, r3
 8001348:	4b90      	ldr	r3, [pc, #576]	; (800158c <BMP180_Get_Pressure+0x310>)
 800134a:	601a      	str	r2, [r3, #0]
	pX1 = AC3 * pB6 / pow(2., 13.);
 800134c:	4b90      	ldr	r3, [pc, #576]	; (8001590 <BMP180_Get_Pressure+0x314>)
 800134e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001352:	461a      	mov	r2, r3
 8001354:	4b84      	ldr	r3, [pc, #528]	; (8001568 <BMP180_Get_Pressure+0x2ec>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fb03 f302 	mul.w	r3, r3, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f895 	bl	800048c <__aeabi_ui2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <BMP180_Get_Pressure+0x318>)
 8001368:	f7ff fa34 	bl	80007d4 <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fb16 	bl	80009a4 <__aeabi_d2iz>
 8001378:	4603      	mov	r3, r0
 800137a:	4a7f      	ldr	r2, [pc, #508]	; (8001578 <BMP180_Get_Pressure+0x2fc>)
 800137c:	6013      	str	r3, [r2, #0]
	pX2 = (pB1 * (pB6 * pB6 / pow(2., 12.))) / pow(2.,12.);
 800137e:	4b86      	ldr	r3, [pc, #536]	; (8001598 <BMP180_Get_Pressure+0x31c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f882 	bl	800048c <__aeabi_ui2d>
 8001388:	4604      	mov	r4, r0
 800138a:	460d      	mov	r5, r1
 800138c:	4b76      	ldr	r3, [pc, #472]	; (8001568 <BMP180_Get_Pressure+0x2ec>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a75      	ldr	r2, [pc, #468]	; (8001568 <BMP180_Get_Pressure+0x2ec>)
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f877 	bl	800048c <__aeabi_ui2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b73      	ldr	r3, [pc, #460]	; (8001570 <BMP180_Get_Pressure+0x2f4>)
 80013a4:	f7ff fa16 	bl	80007d4 <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4620      	mov	r0, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	f7ff f8e6 	bl	8000580 <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <BMP180_Get_Pressure+0x2f4>)
 80013c2:	f7ff fa07 	bl	80007d4 <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fae9 	bl	80009a4 <__aeabi_d2iz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a6a      	ldr	r2, [pc, #424]	; (8001580 <BMP180_Get_Pressure+0x304>)
 80013d6:	6013      	str	r3, [r2, #0]
	pX3 = ((pX1 + pX2) + 2) / 4;
 80013d8:	4b67      	ldr	r3, [pc, #412]	; (8001578 <BMP180_Get_Pressure+0x2fc>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b68      	ldr	r3, [pc, #416]	; (8001580 <BMP180_Get_Pressure+0x304>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	3302      	adds	r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	da00      	bge.n	80013ea <BMP180_Get_Pressure+0x16e>
 80013e8:	3303      	adds	r3, #3
 80013ea:	109b      	asrs	r3, r3, #2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b65      	ldr	r3, [pc, #404]	; (8001584 <BMP180_Get_Pressure+0x308>)
 80013f0:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (unsigned long)(pX3 + 32768) / pow(2.,15.);
 80013f2:	4b6a      	ldr	r3, [pc, #424]	; (800159c <BMP180_Get_Pressure+0x320>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b62      	ldr	r3, [pc, #392]	; (8001584 <BMP180_Get_Pressure+0x308>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001402:	fb03 f302 	mul.w	r3, r3, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f840 	bl	800048c <__aeabi_ui2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <BMP180_Get_Pressure+0x324>)
 8001412:	f7ff f9df 	bl	80007d4 <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff fae9 	bl	80009f4 <__aeabi_d2uiz>
 8001422:	4603      	mov	r3, r0
 8001424:	4a5f      	ldr	r2, [pc, #380]	; (80015a4 <BMP180_Get_Pressure+0x328>)
 8001426:	6013      	str	r3, [r2, #0]
	pB7 = ((unsigned long)unCompPressure - pB3) * (50000 >> (uint8_t)BMP180_OSS_Value);
 8001428:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <BMP180_Get_Pressure+0x32c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <BMP180_Get_Pressure+0x310>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f641 026a 	movw	r2, #6250	; 0x186a
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	4a5b      	ldr	r2, [pc, #364]	; (80015ac <BMP180_Get_Pressure+0x330>)
 800143e:	6013      	str	r3, [r2, #0]

	if (pB7 < 0x80000000)
 8001440:	4b5a      	ldr	r3, [pc, #360]	; (80015ac <BMP180_Get_Pressure+0x330>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db09      	blt.n	800145c <BMP180_Get_Pressure+0x1e0>
		p = (pB7 * 2) / pB4;
 8001448:	4b58      	ldr	r3, [pc, #352]	; (80015ac <BMP180_Get_Pressure+0x330>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	005a      	lsls	r2, r3, #1
 800144e:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <BMP180_Get_Pressure+0x328>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4a56      	ldr	r2, [pc, #344]	; (80015b0 <BMP180_Get_Pressure+0x334>)
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e008      	b.n	800146e <BMP180_Get_Pressure+0x1f2>
	else
		p = (pB7 / pB4) * 2;
 800145c:	4b53      	ldr	r3, [pc, #332]	; (80015ac <BMP180_Get_Pressure+0x330>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <BMP180_Get_Pressure+0x328>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fbb2 f3f3 	udiv	r3, r2, r3
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4a51      	ldr	r2, [pc, #324]	; (80015b0 <BMP180_Get_Pressure+0x334>)
 800146c:	6013      	str	r3, [r2, #0]
	pX1 = (p / pow(2., 8.)) * (p / pow(2., 8.));
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <BMP180_Get_Pressure+0x334>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f80a 	bl	800048c <__aeabi_ui2d>
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <BMP180_Get_Pressure+0x338>)
 800147e:	f7ff f9a9 	bl	80007d4 <__aeabi_ddiv>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4614      	mov	r4, r2
 8001488:	461d      	mov	r5, r3
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <BMP180_Get_Pressure+0x334>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe fffc 	bl	800048c <__aeabi_ui2d>
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <BMP180_Get_Pressure+0x338>)
 800149a:	f7ff f99b 	bl	80007d4 <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4620      	mov	r0, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	f7ff f86b 	bl	8000580 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fa77 	bl	80009a4 <__aeabi_d2iz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <BMP180_Get_Pressure+0x2fc>)
 80014ba:	6013      	str	r3, [r2, #0]
	pX1 = (pX1 * 3038) / pow(2.,16.);
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <BMP180_Get_Pressure+0x2fc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f640 32de 	movw	r2, #3038	; 0xbde
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe ffef 	bl	80004ac <__aeabi_i2d>
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <BMP180_Get_Pressure+0x33c>)
 80014d4:	f7ff f97e 	bl	80007d4 <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fa60 	bl	80009a4 <__aeabi_d2iz>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <BMP180_Get_Pressure+0x2fc>)
 80014e8:	6013      	str	r3, [r2, #0]
	pX2 = (-7357 * p) / pow(2., 16.);
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <BMP180_Get_Pressure+0x334>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <BMP180_Get_Pressure+0x340>)
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ffc9 	bl	800048c <__aeabi_ui2d>
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <BMP180_Get_Pressure+0x33c>)
 8001500:	f7ff f968 	bl	80007d4 <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fa4a 	bl	80009a4 <__aeabi_d2iz>
 8001510:	4603      	mov	r3, r0
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <BMP180_Get_Pressure+0x304>)
 8001514:	6013      	str	r3, [r2, #0]
	p = p + (pX1 + pX2 + 3791) / pow(2.,4.);
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <BMP180_Get_Pressure+0x334>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ffb6 	bl	800048c <__aeabi_ui2d>
 8001520:	4604      	mov	r4, r0
 8001522:	460d      	mov	r5, r1
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <BMP180_Get_Pressure+0x2fc>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <BMP180_Get_Pressure+0x304>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ffba 	bl	80004ac <__aeabi_i2d>
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <BMP180_Get_Pressure+0x344>)
 800153e:	f7ff f949 	bl	80007d4 <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4620      	mov	r0, r4
 8001548:	4629      	mov	r1, r5
 800154a:	f7fe fe63 	bl	8000214 <__adddf3>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fa4d 	bl	80009f4 <__aeabi_d2uiz>
 800155a:	4603      	mov	r3, r0
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <BMP180_Get_Pressure+0x334>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	20000068 	.word	0x20000068
 8001568:	20000074 	.word	0x20000074
 800156c:	2000003c 	.word	0x2000003c
 8001570:	40b00000 	.word	0x40b00000
 8001574:	40a00000 	.word	0x40a00000
 8001578:	20000054 	.word	0x20000054
 800157c:	20000062 	.word	0x20000062
 8001580:	20000044 	.word	0x20000044
 8001584:	2000005c 	.word	0x2000005c
 8001588:	20000032 	.word	0x20000032
 800158c:	20000038 	.word	0x20000038
 8001590:	20000064 	.word	0x20000064
 8001594:	40c00000 	.word	0x40c00000
 8001598:	20000028 	.word	0x20000028
 800159c:	20000050 	.word	0x20000050
 80015a0:	40e00000 	.word	0x40e00000
 80015a4:	20000080 	.word	0x20000080
 80015a8:	2000006c 	.word	0x2000006c
 80015ac:	20000070 	.word	0x20000070
 80015b0:	2000002c 	.word	0x2000002c
 80015b4:	40700000 	.word	0x40700000
 80015b8:	40f00000 	.word	0x40f00000
 80015bc:	ffffe343 	.word	0xffffe343
 80015c0:	40300000 	.word	0x40300000

080015c4 <BMP180_Get_Uncompensated_Temperature>:

void BMP180_Get_Uncompensated_Temperature()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af04      	add	r7, sp, #16
	uint8_t rData[2] = {0};
 80015ca:	2300      	movs	r3, #0
 80015cc:	80bb      	strh	r3, [r7, #4]
	uint8_t wData[1];
	wData[0] = 0x2E; // bu değeri datasheet'ten aldık
 80015ce:	232e      	movs	r3, #46	; 0x2e
 80015d0:	703b      	strb	r3, [r7, #0]
	//0xF4 register'ına 0x2E değerini girdik
	HAL_I2C_Mem_Write(&hi2c1,BMP180_DEVICE_ADDRESS_WRITE , BMP180_Pres_Temp_Write_Register, 1, wData, 1, 100000); //0xF4 değerinide datasheetten aldık
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <BMP180_Get_Uncompensated_Temperature+0x60>)
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	463b      	mov	r3, r7
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	22f4      	movs	r2, #244	; 0xf4
 80015e2:	21ee      	movs	r1, #238	; 0xee
 80015e4:	4810      	ldr	r0, [pc, #64]	; (8001628 <BMP180_Get_Uncompensated_Temperature+0x64>)
 80015e6:	f000 ff3f 	bl	8002468 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80015ea:	2005      	movs	r0, #5
 80015ec:	f000 fb40 	bl	8001c70 <HAL_Delay>
	//0xF6 register'ından 0xF7 register'ına kadar okuma yaptık
	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_ADDRESS_READ, BMP180_unComp_PresTemp_Start, 1, rData, 2, 100000);
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <BMP180_Get_Uncompensated_Temperature+0x60>)
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2302      	movs	r3, #2
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	22f6      	movs	r2, #246	; 0xf6
 8001600:	21ef      	movs	r1, #239	; 0xef
 8001602:	4809      	ldr	r0, [pc, #36]	; (8001628 <BMP180_Get_Uncompensated_Temperature+0x64>)
 8001604:	f001 f82a 	bl	800265c <HAL_I2C_Mem_Read>

	unCompTemperature = (int16_t)((rData[0] << 8) | rData[1]);
 8001608:	793b      	ldrb	r3, [r7, #4]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	797b      	ldrb	r3, [r7, #5]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <BMP180_Get_Uncompensated_Temperature+0x68>)
 8001618:	801a      	strh	r2, [r3, #0]
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	000186a0 	.word	0x000186a0
 8001628:	20000088 	.word	0x20000088
 800162c:	20000078 	.word	0x20000078

08001630 <BMP180_Get_Uncompensated_Pressure>:

void BMP180_Get_Uncompensated_Pressure()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af04      	add	r7, sp, #16
	uint8_t wData[1] = {0};
 8001636:	2300      	movs	r3, #0
 8001638:	713b      	strb	r3, [r7, #4]
	uint8_t rData[3] = {0};
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <BMP180_Get_Uncompensated_Pressure+0x6c>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	803b      	strh	r3, [r7, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	70bb      	strb	r3, [r7, #2]
	wData[0] = 0x34 | (BMP180_OSS_Value << 6);
 8001644:	23f4      	movs	r3, #244	; 0xf4
 8001646:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_ADDRESS_WRITE, BMP180_Pres_Temp_Write_Register, 1, wData, 1, 100000);
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <BMP180_Get_Uncompensated_Pressure+0x70>)
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2301      	movs	r3, #1
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2301      	movs	r3, #1
 8001656:	22f4      	movs	r2, #244	; 0xf4
 8001658:	21ee      	movs	r1, #238	; 0xee
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <BMP180_Get_Uncompensated_Pressure+0x74>)
 800165c:	f000 fffe 	bl	800265c <HAL_I2C_Mem_Read>
	HAL_Delay(26);
 8001660:	201a      	movs	r0, #26
 8001662:	f000 fb05 	bl	8001c70 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_ADDRESS_READ, BMP180_unComp_PresTemp_Start, 1, rData, 3, 100000);
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <BMP180_Get_Uncompensated_Pressure+0x70>)
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2303      	movs	r3, #3
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	463b      	mov	r3, r7
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	22f6      	movs	r2, #246	; 0xf6
 8001676:	21ef      	movs	r1, #239	; 0xef
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <BMP180_Get_Uncompensated_Pressure+0x74>)
 800167a:	f000 ffef 	bl	800265c <HAL_I2C_Mem_Read>
	unCompTemperature = ((rData[0] << 16) | (rData[1] << 8) | (rData[2])) >> (8 - (uint8_t)BMP180_OSS_Value);
 800167e:	783b      	ldrb	r3, [r7, #0]
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	787b      	ldrb	r3, [r7, #1]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	4313      	orrs	r3, r2
 8001688:	78ba      	ldrb	r2, [r7, #2]
 800168a:	4313      	orrs	r3, r2
 800168c:	115b      	asrs	r3, r3, #5
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <BMP180_Get_Uncompensated_Pressure+0x78>)
 8001692:	801a      	strh	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	080043cc 	.word	0x080043cc
 80016a0:	000186a0 	.word	0x000186a0
 80016a4:	20000088 	.word	0x20000088
 80016a8:	20000078 	.word	0x20000078

080016ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b0:	f000 fa6c 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b4:	f000 f80e 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b8:	f000 f8d6 	bl	8001868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016bc:	f000 f8aa 	bl	8001814 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016c0:	f000 f87a 	bl	80017b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //();
  BMP180_Init();
 80016c4:	f7ff fb82 	bl	8000dcc <BMP180_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BMP180_Get_Temperature();
 80016c8:	f7ff fd3a 	bl	8001140 <BMP180_Get_Temperature>
	  BMP180_Get_Pressure();
 80016cc:	f7ff fdd6 	bl	800127c <BMP180_Get_Pressure>
	  BMP180_Get_Temperature();
 80016d0:	e7fa      	b.n	80016c8 <main+0x1c>
	...

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2234      	movs	r2, #52	; 0x34
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fe5e 	bl	80043a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <SystemClock_Config+0xdc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <SystemClock_Config+0xdc>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <SystemClock_Config+0xdc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <SystemClock_Config+0xe0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <SystemClock_Config+0xe0>)
 800171e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <SystemClock_Config+0xe0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001748:	23b4      	movs	r3, #180	; 0xb4
 800174a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001754:	2302      	movs	r3, #2
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4618      	mov	r0, r3
 800175e:	f002 f949 	bl	80039f4 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001768:	f000 f8ec 	bl	8001944 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800176c:	f001 fe26 	bl	80033bc <HAL_PWREx_EnableOverDrive>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001776:	f000 f8e5 	bl	8001944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2105      	movs	r1, #5
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fe5f 	bl	800345c <HAL_RCC_ClockConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80017a4:	f000 f8ce 	bl	8001944 <Error_Handler>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3750      	adds	r7, #80	; 0x50
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_I2C1_Init+0x50>)
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <MX_I2C1_Init+0x54>)
 80017c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_I2C1_Init+0x50>)
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_I2C1_Init+0x58>)
 80017c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f6:	f000 fcf3 	bl	80021e0 <HAL_I2C_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001800:	f000 f8a0 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000088 	.word	0x20000088
 800180c:	40005400 	.word	0x40005400
 8001810:	00061a80 	.word	0x00061a80

08001814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_USART2_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800184c:	f002 fb70 	bl	8003f30 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f000 f875 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200000dc 	.word	0x200000dc
 8001864:	40004400 	.word	0x40004400

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <MX_GPIO_Init+0xd0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <MX_GPIO_Init+0xd0>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <MX_GPIO_Init+0xd0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a25      	ldr	r2, [pc, #148]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a17      	ldr	r2, [pc, #92]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_GPIO_Init+0xd0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2120      	movs	r1, #32
 80018f2:	4812      	ldr	r0, [pc, #72]	; (800193c <MX_GPIO_Init+0xd4>)
 80018f4:	f000 fc5a 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	480c      	ldr	r0, [pc, #48]	; (8001940 <MX_GPIO_Init+0xd8>)
 8001910:	f000 fab8 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001914:	2320      	movs	r3, #32
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_GPIO_Init+0xd4>)
 800192c:	f000 faaa 	bl	8001e84 <HAL_GPIO_Init>

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020800 	.word	0x40020800

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	e7fe      	b.n	800194c <Error_Handler+0x8>
	...

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_MspInit+0x4c>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_MspInit+0x4c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800198e:	2007      	movs	r0, #7
 8001990:	f000 fa44 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_I2C_MspInit+0x84>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12b      	bne.n	8001a1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ee:	2304      	movs	r3, #4
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <HAL_I2C_MspInit+0x8c>)
 80019fa:	f000 fa43 	bl	8001e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_UART_MspInit+0x84>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12b      	bne.n	8001aaa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_UART_MspInit+0x88>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_UART_MspInit+0x88>)
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_UART_MspInit+0x88>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_UART_MspInit+0x88>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_UART_MspInit+0x88>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_UART_MspInit+0x88>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <HAL_UART_MspInit+0x8c>)
 8001aa6:	f000 f9ed 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <UsageFault_Handler+0x4>

08001ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0c:	f000 f890 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <SystemInit+0x20>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <SystemInit+0x20>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b3e:	490e      	ldr	r1, [pc, #56]	; (8001b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b54:	4c0b      	ldr	r4, [pc, #44]	; (8001b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b62:	f7ff ffd7 	bl	8001b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f002 fbf9 	bl	800435c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6a:	f7ff fd9f 	bl	80016ac <main>
  bx  lr    
 8001b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b7c:	080043f8 	.word	0x080043f8
  ldr r2, =_sbss
 8001b80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b84:	20000124 	.word	0x20000124

08001b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <HAL_Init+0x40>)
 8001b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_Init+0x40>)
 8001ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_Init+0x40>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f931 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f808 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff fec6 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x58>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f93b 	bl	8001e6a <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 f911 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <HAL_InitTick+0x5c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000120 	.word	0x20000120

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000120 	.word	0x20000120

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff47 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff5c 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffb0 	bl	8001dd8 <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e165      	b.n	800216c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8154 	bne.w	8002166 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80ae 	beq.w	8002166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_GPIO_Init+0x300>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_GPIO_Init+0x300>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <HAL_GPIO_Init+0x300>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_GPIO_Init+0x304>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4f      	ldr	r2, [pc, #316]	; (800218c <HAL_GPIO_Init+0x308>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d025      	beq.n	800209e <HAL_GPIO_Init+0x21a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <HAL_GPIO_Init+0x30c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <HAL_GPIO_Init+0x216>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <HAL_GPIO_Init+0x310>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x212>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4c      	ldr	r2, [pc, #304]	; (8002198 <HAL_GPIO_Init+0x314>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4b      	ldr	r2, [pc, #300]	; (800219c <HAL_GPIO_Init+0x318>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x20a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4a      	ldr	r2, [pc, #296]	; (80021a0 <HAL_GPIO_Init+0x31c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x206>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a49      	ldr	r2, [pc, #292]	; (80021a4 <HAL_GPIO_Init+0x320>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x202>
 8002082:	2306      	movs	r3, #6
 8002084:	e00c      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002086:	2307      	movs	r3, #7
 8002088:	e00a      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800208a:	2305      	movs	r3, #5
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800208e:	2304      	movs	r3, #4
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x304>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_GPIO_Init+0x324>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e2:	4a31      	ldr	r2, [pc, #196]	; (80021a8 <HAL_GPIO_Init+0x324>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_GPIO_Init+0x324>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <HAL_GPIO_Init+0x324>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_GPIO_Init+0x324>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_GPIO_Init+0x324>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_GPIO_Init+0x324>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <HAL_GPIO_Init+0x324>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f ae96 	bls.w	8001ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e12b      	b.n	800244a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fbca 	bl	80019a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2224      	movs	r2, #36	; 0x24
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002244:	f001 f9fc 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8002248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a81      	ldr	r2, [pc, #516]	; (8002454 <HAL_I2C_Init+0x274>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d807      	bhi.n	8002264 <HAL_I2C_Init+0x84>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a80      	ldr	r2, [pc, #512]	; (8002458 <HAL_I2C_Init+0x278>)
 8002258:	4293      	cmp	r3, r2
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e006      	b.n	8002272 <HAL_I2C_Init+0x92>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a7d      	ldr	r2, [pc, #500]	; (800245c <HAL_I2C_Init+0x27c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	bf94      	ite	ls
 800226c:	2301      	movls	r3, #1
 800226e:	2300      	movhi	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0e7      	b.n	800244a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a78      	ldr	r2, [pc, #480]	; (8002460 <HAL_I2C_Init+0x280>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a6a      	ldr	r2, [pc, #424]	; (8002454 <HAL_I2C_Init+0x274>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d802      	bhi.n	80022b4 <HAL_I2C_Init+0xd4>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3301      	adds	r3, #1
 80022b2:	e009      	b.n	80022c8 <HAL_I2C_Init+0xe8>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	4a69      	ldr	r2, [pc, #420]	; (8002464 <HAL_I2C_Init+0x284>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	3301      	adds	r3, #1
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	495c      	ldr	r1, [pc, #368]	; (8002454 <HAL_I2C_Init+0x274>)
 80022e4:	428b      	cmp	r3, r1
 80022e6:	d819      	bhi.n	800231c <HAL_I2C_Init+0x13c>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e59      	subs	r1, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f6:	1c59      	adds	r1, r3, #1
 80022f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022fc:	400b      	ands	r3, r1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_I2C_Init+0x138>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e59      	subs	r1, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	e051      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 8002318:	2304      	movs	r3, #4
 800231a:	e04f      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d111      	bne.n	8002348 <HAL_I2C_Init+0x168>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e012      	b.n	800236e <HAL_I2C_Init+0x18e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	0099      	lsls	r1, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Init+0x196>
 8002372:	2301      	movs	r3, #1
 8002374:	e022      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10e      	bne.n	800239c <HAL_I2C_Init+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e58      	subs	r0, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	440b      	add	r3, r1
 800238c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	e00f      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	6809      	ldr	r1, [r1, #0]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6911      	ldr	r1, [r2, #16]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68d2      	ldr	r2, [r2, #12]
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	000186a0 	.word	0x000186a0
 8002458:	001e847f 	.word	0x001e847f
 800245c:	003d08ff 	.word	0x003d08ff
 8002460:	431bde83 	.word	0x431bde83
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]
 800247a:	460b      	mov	r3, r1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002482:	f7ff fbe9 	bl	8001c58 <HAL_GetTick>
 8002486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b20      	cmp	r3, #32
 8002492:	f040 80d9 	bne.w	8002648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2319      	movs	r3, #25
 800249c:	2201      	movs	r2, #1
 800249e:	496d      	ldr	r1, [pc, #436]	; (8002654 <HAL_I2C_Mem_Write+0x1ec>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fdad 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0cc      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Mem_Write+0x56>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0c5      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d007      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2221      	movs	r2, #33	; 0x21
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_I2C_Mem_Write+0x1f0>)
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fbe4 	bl	8002d04 <I2C_RequestMemoryWrite>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d052      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e081      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fe2e 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b04      	cmp	r3, #4
 800255c:	d107      	bne.n	800256e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d11b      	bne.n	80025e8 <HAL_I2C_Mem_Write+0x180>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d017      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1aa      	bne.n	8002546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fe1a 	bl	800322e <I2C_WaitOnBTFFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b04      	cmp	r3, #4
 8002606:	d107      	bne.n	8002618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e016      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	00100002 	.word	0x00100002
 8002658:	ffff0000 	.word	0xffff0000

0800265c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	; 0x30
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	4608      	mov	r0, r1
 8002666:	4611      	mov	r1, r2
 8002668:	461a      	mov	r2, r3
 800266a:	4603      	mov	r3, r0
 800266c:	817b      	strh	r3, [r7, #10]
 800266e:	460b      	mov	r3, r1
 8002670:	813b      	strh	r3, [r7, #8]
 8002672:	4613      	mov	r3, r2
 8002674:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002676:	f7ff faef 	bl	8001c58 <HAL_GetTick>
 800267a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b20      	cmp	r3, #32
 8002686:	f040 8208 	bne.w	8002a9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2319      	movs	r3, #25
 8002690:	2201      	movs	r2, #1
 8002692:	497b      	ldr	r1, [pc, #492]	; (8002880 <HAL_I2C_Mem_Read+0x224>)
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fcb3 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
 80026a2:	e1fb      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_I2C_Mem_Read+0x56>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e1f4      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d007      	beq.n	80026d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2222      	movs	r2, #34	; 0x22
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a5b      	ldr	r2, [pc, #364]	; (8002884 <HAL_I2C_Mem_Read+0x228>)
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800271a:	88f8      	ldrh	r0, [r7, #6]
 800271c:	893a      	ldrh	r2, [r7, #8]
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	4603      	mov	r3, r0
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fb80 	bl	8002e30 <I2C_RequestMemoryRead>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1b0      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	2b00      	cmp	r3, #0
 8002740:	d113      	bne.n	800276a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e184      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	2b01      	cmp	r3, #1
 8002770:	d11b      	bne.n	80027aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e164      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d11b      	bne.n	80027ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	e144      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002800:	e138      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	2b03      	cmp	r3, #3
 8002808:	f200 80f1 	bhi.w	80029ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	2b01      	cmp	r3, #1
 8002812:	d123      	bne.n	800285c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fd49 	bl	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e139      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	; 0x2a
 800285a:	e10b      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	2b02      	cmp	r3, #2
 8002862:	d14e      	bne.n	8002902 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	2200      	movs	r2, #0
 800286c:	4906      	ldr	r1, [pc, #24]	; (8002888 <HAL_I2C_Mem_Read+0x22c>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fbc6 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e10e      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
 800287e:	bf00      	nop
 8002880:	00100002 	.word	0x00100002
 8002884:	ffff0000 	.word	0xffff0000
 8002888:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002900:	e0b8      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	4966      	ldr	r1, [pc, #408]	; (8002aa4 <HAL_I2C_Mem_Read+0x448>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fb77 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0bf      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	2200      	movs	r2, #0
 8002966:	494f      	ldr	r1, [pc, #316]	; (8002aa4 <HAL_I2C_Mem_Read+0x448>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fb49 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e091      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ec:	e042      	b.n	8002a74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fc5c 	bl	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e04c      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d118      	bne.n	8002a74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f aec2 	bne.w	8002802 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	00010004 	.word	0x00010004

08002aa8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff f8ce 	bl	8001c58 <HAL_GetTick>
 8002abc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	f040 8111 	bne.w	8002cf2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2319      	movs	r3, #25
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4988      	ldr	r1, [pc, #544]	; (8002cfc <HAL_I2C_IsDeviceReady+0x254>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa90 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e104      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_IsDeviceReady+0x50>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0fd      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d007      	beq.n	8002b1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2224      	movs	r2, #36	; 0x24
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a70      	ldr	r2, [pc, #448]	; (8002d00 <HAL_I2C_IsDeviceReady+0x258>)
 8002b40:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fa4e 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b78:	d103      	bne.n	8002b82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0b6      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b96:	f7ff f85f 	bl	8001c58 <HAL_GetTick>
 8002b9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bca:	e025      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bcc:	f7ff f844 	bl	8001c58 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d302      	bcc.n	8002be2 <HAL_I2C_IsDeviceReady+0x13a>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	22a0      	movs	r2, #160	; 0xa0
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2ba0      	cmp	r3, #160	; 0xa0
 8002c22:	d005      	beq.n	8002c30 <HAL_I2C_IsDeviceReady+0x188>
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_I2C_IsDeviceReady+0x188>
 8002c2a:	7dbb      	ldrb	r3, [r7, #22]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0cd      	beq.n	8002bcc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d129      	bne.n	8002c9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2319      	movs	r3, #25
 8002c72:	2201      	movs	r2, #1
 8002c74:	4921      	ldr	r1, [pc, #132]	; (8002cfc <HAL_I2C_IsDeviceReady+0x254>)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f9c2 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e036      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e02c      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2319      	movs	r3, #25
 8002cba:	2201      	movs	r2, #1
 8002cbc:	490f      	ldr	r1, [pc, #60]	; (8002cfc <HAL_I2C_IsDeviceReady+0x254>)
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f99e 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e012      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f4ff af32 	bcc.w	8002b42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	00100002 	.word	0x00100002
 8002d00:	ffff0000 	.word	0xffff0000

08002d04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	817b      	strh	r3, [r7, #10]
 8002d16:	460b      	mov	r3, r1
 8002d18:	813b      	strh	r3, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f960 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d54:	d103      	bne.n	8002d5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e05f      	b.n	8002e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	492d      	ldr	r1, [pc, #180]	; (8002e2c <I2C_RequestMemoryWrite+0x128>)
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f998 	bl	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e04c      	b.n	8002e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	6a39      	ldr	r1, [r7, #32]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa02 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d107      	bne.n	8002dc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e02b      	b.n	8002e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd0:	893b      	ldrh	r3, [r7, #8]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	e021      	b.n	8002e20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ddc:	893b      	ldrh	r3, [r7, #8]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	6a39      	ldr	r1, [r7, #32]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f9dc 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d107      	bne.n	8002e12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e005      	b.n	8002e22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e16:	893b      	ldrh	r3, [r7, #8]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	00010002 	.word	0x00010002

08002e30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8c2 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e90:	d103      	bne.n	8002e9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0aa      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	4952      	ldr	r1, [pc, #328]	; (8002ffc <I2C_RequestMemoryRead+0x1cc>)
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f8fa 	bl	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e097      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002edc:	6a39      	ldr	r1, [r7, #32]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f964 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d107      	bne.n	8002f02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e076      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]
 8002f16:	e021      	b.n	8002f5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f18:	893b      	ldrh	r3, [r7, #8]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f93e 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e050      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f52:	893b      	ldrh	r3, [r7, #8]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	6a39      	ldr	r1, [r7, #32]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f923 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d107      	bne.n	8002f84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e035      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f82b 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbe:	d103      	bne.n	8002fc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e013      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fcc:	897b      	ldrh	r3, [r7, #10]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	4906      	ldr	r1, [pc, #24]	; (8002ffc <I2C_RequestMemoryRead+0x1cc>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f863 	bl	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	00010002 	.word	0x00010002

08003000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003010:	e025      	b.n	800305e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d021      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fe fe1d 	bl	8001c58 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d116      	bne.n	800305e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e023      	b.n	80030a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10d      	bne.n	8003084 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	43da      	mvns	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	e00c      	b.n	800309e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d0b6      	beq.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030bc:	e051      	b.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030cc:	d123      	bne.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f043 0204 	orr.w	r2, r3, #4
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e046      	b.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d021      	beq.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe fd9b 	bl	8001c58 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d116      	bne.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e020      	b.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10c      	bne.n	8003186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e00b      	b.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	43da      	mvns	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4013      	ands	r3, r2
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d18d      	bne.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b8:	e02d      	b.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f8ce 	bl	800335c <I2C_IsAcknowledgeFailed>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e02d      	b.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d021      	beq.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7fe fd41 	bl	8001c58 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d1ca      	bne.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800323a:	e02d      	b.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f88d 	bl	800335c <I2C_IsAcknowledgeFailed>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e02d      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d021      	beq.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fe fd00 	bl	8001c58 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e007      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d1ca      	bne.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032bc:	e042      	b.n	8003344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d119      	bne.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0210 	mvn.w	r2, #16
 80032d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e029      	b.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003300:	f7fe fcaa 	bl	8001c58 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	429a      	cmp	r2, r3
 800330e:	d302      	bcc.n	8003316 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d116      	bne.n	8003344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e007      	b.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d1b5      	bne.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d11b      	bne.n	80033ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_PWREx_EnableOverDrive+0x90>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_PWREx_EnableOverDrive+0x90>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d4:	6413      	str	r3, [r2, #64]	; 0x40
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_PWREx_EnableOverDrive+0x90>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_PWREx_EnableOverDrive+0x94>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e8:	f7fe fc36 	bl	8001c58 <HAL_GetTick>
 80033ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033ee:	e009      	b.n	8003404 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033f0:	f7fe fc32 	bl	8001c58 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033fe:	d901      	bls.n	8003404 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e01f      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_PWREx_EnableOverDrive+0x98>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d1ee      	bne.n	80033f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003418:	f7fe fc1e 	bl	8001c58 <HAL_GetTick>
 800341c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800341e:	e009      	b.n	8003434 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003420:	f7fe fc1a 	bl	8001c58 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800342e:	d901      	bls.n	8003434 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e007      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <HAL_PWREx_EnableOverDrive+0x98>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003440:	d1ee      	bne.n	8003420 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	420e0040 	.word	0x420e0040
 8003454:	40007000 	.word	0x40007000
 8003458:	420e0044 	.word	0x420e0044

0800345c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0cc      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b68      	ldr	r3, [pc, #416]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d90c      	bls.n	8003498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b65      	ldr	r3, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d044      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d119      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d003      	beq.n	800351a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003516:	2b03      	cmp	r3, #3
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e06f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e067      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4934      	ldr	r1, [pc, #208]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7fe fb84 	bl	8001c58 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fe fb80 	bl	8001c58 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e04f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d20c      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f855 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490a      	ldr	r1, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fae4 	bl	8001bd0 <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023c00 	.word	0x40023c00
 8003618:	40023800 	.word	0x40023800
 800361c:	080043d0 	.word	0x080043d0
 8003620:	20000000 	.word	0x20000000
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	080043e0 	.word	0x080043e0

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800366c:	f7ff ffdc 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0b5b      	lsrs	r3, r3, #13
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	; (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	080043e0 	.word	0x080043e0

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003694:	b088      	sub	sp, #32
 8003696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ac:	4bce      	ldr	r3, [pc, #824]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	f200 818d 	bhi.w	80039d4 <HAL_RCC_GetSysClockFreq+0x344>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <HAL_RCC_GetSysClockFreq+0x30>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	080039d5 	.word	0x080039d5
 80036c8:	080039d5 	.word	0x080039d5
 80036cc:	080039d5 	.word	0x080039d5
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	080039d5 	.word	0x080039d5
 80036d8:	080039d5 	.word	0x080039d5
 80036dc:	080039d5 	.word	0x080039d5
 80036e0:	08003701 	.word	0x08003701
 80036e4:	080039d5 	.word	0x080039d5
 80036e8:	080039d5 	.word	0x080039d5
 80036ec:	080039d5 	.word	0x080039d5
 80036f0:	08003875 	.word	0x08003875
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4bbd      	ldr	r3, [pc, #756]	; (80039ec <HAL_RCC_GetSysClockFreq+0x35c>)
 80036f6:	61bb      	str	r3, [r7, #24]
       break;
 80036f8:	e16f      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fa:	4bbd      	ldr	r3, [pc, #756]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x360>)
 80036fc:	61bb      	str	r3, [r7, #24]
      break;
 80036fe:	e16c      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003700:	4bb9      	ldr	r3, [pc, #740]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003708:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370a:	4bb7      	ldr	r3, [pc, #732]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d053      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003716:	4bb4      	ldr	r3, [pc, #720]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	461a      	mov	r2, r3
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003726:	f04f 0100 	mov.w	r1, #0
 800372a:	ea02 0400 	and.w	r4, r2, r0
 800372e:	603c      	str	r4, [r7, #0]
 8003730:	400b      	ands	r3, r1
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003738:	4620      	mov	r0, r4
 800373a:	4629      	mov	r1, r5
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	014b      	lsls	r3, r1, #5
 8003746:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800374a:	0142      	lsls	r2, r0, #5
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	4623      	mov	r3, r4
 8003752:	1ac0      	subs	r0, r0, r3
 8003754:	462b      	mov	r3, r5
 8003756:	eb61 0103 	sbc.w	r1, r1, r3
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	018b      	lsls	r3, r1, #6
 8003764:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003768:	0182      	lsls	r2, r0, #6
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	eb63 0301 	sbc.w	r3, r3, r1
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	00d9      	lsls	r1, r3, #3
 800377a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800377e:	00d0      	lsls	r0, r2, #3
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4621      	mov	r1, r4
 8003786:	1852      	adds	r2, r2, r1
 8003788:	4629      	mov	r1, r5
 800378a:	eb43 0101 	adc.w	r1, r3, r1
 800378e:	460b      	mov	r3, r1
 8003790:	f04f 0000 	mov.w	r0, #0
 8003794:	f04f 0100 	mov.w	r1, #0
 8003798:	0259      	lsls	r1, r3, #9
 800379a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800379e:	0250      	lsls	r0, r2, #9
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	f7fd f990 	bl	8000ad4 <__aeabi_uldivmod>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4613      	mov	r3, r2
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e04c      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	4b8a      	ldr	r3, [pc, #552]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	461a      	mov	r2, r3
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	ea02 0a00 	and.w	sl, r2, r0
 80037d6:	ea03 0b01 	and.w	fp, r3, r1
 80037da:	4650      	mov	r0, sl
 80037dc:	4659      	mov	r1, fp
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	014b      	lsls	r3, r1, #5
 80037e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037ec:	0142      	lsls	r2, r0, #5
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	ebb0 000a 	subs.w	r0, r0, sl
 80037f6:	eb61 010b 	sbc.w	r1, r1, fp
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	018b      	lsls	r3, r1, #6
 8003804:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003808:	0182      	lsls	r2, r0, #6
 800380a:	1a12      	subs	r2, r2, r0
 800380c:	eb63 0301 	sbc.w	r3, r3, r1
 8003810:	f04f 0000 	mov.w	r0, #0
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	00d9      	lsls	r1, r3, #3
 800381a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800381e:	00d0      	lsls	r0, r2, #3
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	eb12 020a 	adds.w	r2, r2, sl
 8003828:	eb43 030b 	adc.w	r3, r3, fp
 800382c:	f04f 0000 	mov.w	r0, #0
 8003830:	f04f 0100 	mov.w	r1, #0
 8003834:	0299      	lsls	r1, r3, #10
 8003836:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800383a:	0290      	lsls	r0, r2, #10
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	461a      	mov	r2, r3
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	f7fd f942 	bl	8000ad4 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003858:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	3301      	adds	r3, #1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	61bb      	str	r3, [r7, #24]
      break;
 8003872:	e0b2      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003874:	4b5c      	ldr	r3, [pc, #368]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800387e:	4b5a      	ldr	r3, [pc, #360]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d04d      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4b57      	ldr	r3, [pc, #348]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	461a      	mov	r2, r3
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	f240 10ff 	movw	r0, #511	; 0x1ff
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	ea02 0800 	and.w	r8, r2, r0
 80038a2:	ea03 0901 	and.w	r9, r3, r1
 80038a6:	4640      	mov	r0, r8
 80038a8:	4649      	mov	r1, r9
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	014b      	lsls	r3, r1, #5
 80038b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038b8:	0142      	lsls	r2, r0, #5
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	ebb0 0008 	subs.w	r0, r0, r8
 80038c2:	eb61 0109 	sbc.w	r1, r1, r9
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	018b      	lsls	r3, r1, #6
 80038d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038d4:	0182      	lsls	r2, r0, #6
 80038d6:	1a12      	subs	r2, r2, r0
 80038d8:	eb63 0301 	sbc.w	r3, r3, r1
 80038dc:	f04f 0000 	mov.w	r0, #0
 80038e0:	f04f 0100 	mov.w	r1, #0
 80038e4:	00d9      	lsls	r1, r3, #3
 80038e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ea:	00d0      	lsls	r0, r2, #3
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	eb12 0208 	adds.w	r2, r2, r8
 80038f4:	eb43 0309 	adc.w	r3, r3, r9
 80038f8:	f04f 0000 	mov.w	r0, #0
 80038fc:	f04f 0100 	mov.w	r1, #0
 8003900:	0259      	lsls	r1, r3, #9
 8003902:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003906:	0250      	lsls	r0, r2, #9
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	461a      	mov	r2, r3
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f7fd f8dc 	bl	8000ad4 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	e04a      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003926:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	099b      	lsrs	r3, r3, #6
 800392c:	461a      	mov	r2, r3
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	ea02 0400 	and.w	r4, r2, r0
 800393e:	ea03 0501 	and.w	r5, r3, r1
 8003942:	4620      	mov	r0, r4
 8003944:	4629      	mov	r1, r5
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	014b      	lsls	r3, r1, #5
 8003950:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003954:	0142      	lsls	r2, r0, #5
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	1b00      	subs	r0, r0, r4
 800395c:	eb61 0105 	sbc.w	r1, r1, r5
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	018b      	lsls	r3, r1, #6
 800396a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800396e:	0182      	lsls	r2, r0, #6
 8003970:	1a12      	subs	r2, r2, r0
 8003972:	eb63 0301 	sbc.w	r3, r3, r1
 8003976:	f04f 0000 	mov.w	r0, #0
 800397a:	f04f 0100 	mov.w	r1, #0
 800397e:	00d9      	lsls	r1, r3, #3
 8003980:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003984:	00d0      	lsls	r0, r2, #3
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	1912      	adds	r2, r2, r4
 800398c:	eb45 0303 	adc.w	r3, r5, r3
 8003990:	f04f 0000 	mov.w	r0, #0
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	0299      	lsls	r1, r3, #10
 800399a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800399e:	0290      	lsls	r0, r2, #10
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	f7fd f890 	bl	8000ad4 <__aeabi_uldivmod>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4613      	mov	r3, r2
 80039ba:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	0f1b      	lsrs	r3, r3, #28
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	61bb      	str	r3, [r7, #24]
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetSysClockFreq+0x35c>)
 80039d6:	61bb      	str	r3, [r7, #24]
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	69bb      	ldr	r3, [r7, #24]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e28d      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8083 	beq.w	8003b1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a14:	4b94      	ldr	r3, [pc, #592]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d019      	beq.n	8003a54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a20:	4b91      	ldr	r3, [pc, #580]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a2c:	4b8e      	ldr	r3, [pc, #568]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b8b      	ldr	r3, [pc, #556]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b84      	ldr	r3, [pc, #528]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x124>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e25a      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x90>
 8003a76:	4b7c      	ldr	r3, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7b      	ldr	r2, [pc, #492]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xcc>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xb4>
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b73      	ldr	r3, [pc, #460]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xcc>
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6e      	ldr	r2, [pc, #440]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b6c      	ldr	r3, [pc, #432]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6b      	ldr	r2, [pc, #428]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f8c6 	bl	8001c58 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f8c2 	bl	8001c58 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e21f      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xdc>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe f8b2 	bl	8001c58 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe f8ae 	bl	8001c58 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e20b      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b57      	ldr	r3, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x104>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d06f      	beq.n	8003c06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b26:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d017      	beq.n	8003b62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b32:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d11c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d116      	bne.n	8003b90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x186>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1d3      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4937      	ldr	r1, [pc, #220]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	e03a      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b98:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x278>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f85b 	bl	8001c58 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fe f857 	bl	8001c58 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1b4      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4925      	ldr	r1, [pc, #148]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]
 8003bd8:	e015      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCC_OscConfig+0x278>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe f83a 	bl	8001c58 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe f836 	bl	8001c58 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e193      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d036      	beq.n	8003c80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_RCC_OscConfig+0x27c>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe f81a 	bl	8001c58 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fe f816 	bl	8001c58 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e173      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x234>
 8003c46:	e01b      	b.n	8003c80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe f803 	bl	8001c58 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	e00e      	b.n	8003c74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fd ffff 	bl	8001c58 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d907      	bls.n	8003c74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e15c      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	42470000 	.word	0x42470000
 8003c70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	4b8a      	ldr	r3, [pc, #552]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ea      	bne.n	8003c56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8097 	beq.w	8003dbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b83      	ldr	r3, [pc, #524]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	4b7f      	ldr	r3, [pc, #508]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	4a7e      	ldr	r2, [pc, #504]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	; 0x40
 8003cae:	4b7c      	ldr	r3, [pc, #496]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b79      	ldr	r3, [pc, #484]	; (8003ea4 <HAL_RCC_OscConfig+0x4b0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d118      	bne.n	8003cfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cca:	4b76      	ldr	r3, [pc, #472]	; (8003ea4 <HAL_RCC_OscConfig+0x4b0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a75      	ldr	r2, [pc, #468]	; (8003ea4 <HAL_RCC_OscConfig+0x4b0>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd6:	f7fd ffbf 	bl	8001c58 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fd ffbb 	bl	8001c58 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e118      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	4b6c      	ldr	r3, [pc, #432]	; (8003ea4 <HAL_RCC_OscConfig+0x4b0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x31e>
 8003d04:	4b66      	ldr	r3, [pc, #408]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	4a65      	ldr	r2, [pc, #404]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d10:	e01c      	b.n	8003d4c <HAL_RCC_OscConfig+0x358>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x340>
 8003d1a:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a60      	ldr	r2, [pc, #384]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
 8003d26:	4b5e      	ldr	r3, [pc, #376]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a5d      	ldr	r2, [pc, #372]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0x358>
 8003d34:	4b5a      	ldr	r3, [pc, #360]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	4b57      	ldr	r3, [pc, #348]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a56      	ldr	r2, [pc, #344]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fd ff80 	bl	8001c58 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fd ff7c 	bl	8001c58 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0d7      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d72:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ee      	beq.n	8003d5c <HAL_RCC_OscConfig+0x368>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd ff6a 	bl	8001c58 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fd ff66 	bl	8001c58 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0c1      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9e:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ee      	bne.n	8003d88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db0:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	4a3a      	ldr	r2, [pc, #232]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80ad 	beq.w	8003f20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc6:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d060      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d145      	bne.n	8003e66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b33      	ldr	r3, [pc, #204]	; (8003ea8 <HAL_RCC_OscConfig+0x4b4>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd ff3a 	bl	8001c58 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd ff36 	bl	8001c58 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e093      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	491b      	ldr	r1, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e38:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <HAL_RCC_OscConfig+0x4b4>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd ff0b 	bl	8001c58 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fd ff07 	bl	8001c58 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e064      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x452>
 8003e64:	e05c      	b.n	8003f20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_RCC_OscConfig+0x4b4>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fef4 	bl	8001c58 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd fef0 	bl	8001c58 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e04d      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x480>
 8003e92:	e045      	b.n	8003f20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e040      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eac:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <HAL_RCC_OscConfig+0x538>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d030      	beq.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d129      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d122      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d119      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d10f      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e03f      	b.n	8003fc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd fd6a 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f829 	bl	8003fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd0:	b09f      	sub	sp, #124	; 0x7c
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	68d9      	ldr	r1, [r3, #12]
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	ea40 0301 	orr.w	r3, r0, r1
 8003fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	4313      	orrs	r3, r2
 8004004:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004010:	f021 010c 	bic.w	r1, r1, #12
 8004014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800401a:	430b      	orrs	r3, r1
 800401c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	6999      	ldr	r1, [r3, #24]
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	ea40 0301 	orr.w	r3, r0, r1
 8004034:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4bc5      	ldr	r3, [pc, #788]	; (8004350 <UART_SetConfig+0x384>)
 800403c:	429a      	cmp	r2, r3
 800403e:	d004      	beq.n	800404a <UART_SetConfig+0x7e>
 8004040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4bc3      	ldr	r3, [pc, #780]	; (8004354 <UART_SetConfig+0x388>)
 8004046:	429a      	cmp	r2, r3
 8004048:	d103      	bne.n	8004052 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800404a:	f7ff fb0d 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 800404e:	6778      	str	r0, [r7, #116]	; 0x74
 8004050:	e002      	b.n	8004058 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004052:	f7ff faf5 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8004056:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004060:	f040 80b6 	bne.w	80041d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004066:	461c      	mov	r4, r3
 8004068:	f04f 0500 	mov.w	r5, #0
 800406c:	4622      	mov	r2, r4
 800406e:	462b      	mov	r3, r5
 8004070:	1891      	adds	r1, r2, r2
 8004072:	6439      	str	r1, [r7, #64]	; 0x40
 8004074:	415b      	adcs	r3, r3
 8004076:	647b      	str	r3, [r7, #68]	; 0x44
 8004078:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800407c:	1912      	adds	r2, r2, r4
 800407e:	eb45 0303 	adc.w	r3, r5, r3
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	00d9      	lsls	r1, r3, #3
 800408c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004090:	00d0      	lsls	r0, r2, #3
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	1911      	adds	r1, r2, r4
 8004098:	6639      	str	r1, [r7, #96]	; 0x60
 800409a:	416b      	adcs	r3, r5
 800409c:	667b      	str	r3, [r7, #100]	; 0x64
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	1891      	adds	r1, r2, r2
 80040aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80040ac:	415b      	adcs	r3, r3
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040b8:	f7fc fd0c 	bl	8000ad4 <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4ba5      	ldr	r3, [pc, #660]	; (8004358 <UART_SetConfig+0x38c>)
 80040c2:	fba3 2302 	umull	r2, r3, r3, r2
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	011e      	lsls	r6, r3, #4
 80040ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040cc:	461c      	mov	r4, r3
 80040ce:	f04f 0500 	mov.w	r5, #0
 80040d2:	4622      	mov	r2, r4
 80040d4:	462b      	mov	r3, r5
 80040d6:	1891      	adds	r1, r2, r2
 80040d8:	6339      	str	r1, [r7, #48]	; 0x30
 80040da:	415b      	adcs	r3, r3
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
 80040de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040e2:	1912      	adds	r2, r2, r4
 80040e4:	eb45 0303 	adc.w	r3, r5, r3
 80040e8:	f04f 0000 	mov.w	r0, #0
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	00d9      	lsls	r1, r3, #3
 80040f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040f6:	00d0      	lsls	r0, r2, #3
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	1911      	adds	r1, r2, r4
 80040fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004100:	416b      	adcs	r3, r5
 8004102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	461a      	mov	r2, r3
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	1891      	adds	r1, r2, r2
 8004110:	62b9      	str	r1, [r7, #40]	; 0x28
 8004112:	415b      	adcs	r3, r3
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800411a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800411e:	f7fc fcd9 	bl	8000ad4 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4b8c      	ldr	r3, [pc, #560]	; (8004358 <UART_SetConfig+0x38c>)
 8004128:	fba3 1302 	umull	r1, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	2164      	movs	r1, #100	; 0x64
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	3332      	adds	r3, #50	; 0x32
 800413a:	4a87      	ldr	r2, [pc, #540]	; (8004358 <UART_SetConfig+0x38c>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004148:	441e      	add	r6, r3
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	4618      	mov	r0, r3
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	1894      	adds	r4, r2, r2
 8004158:	623c      	str	r4, [r7, #32]
 800415a:	415b      	adcs	r3, r3
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004162:	1812      	adds	r2, r2, r0
 8004164:	eb41 0303 	adc.w	r3, r1, r3
 8004168:	f04f 0400 	mov.w	r4, #0
 800416c:	f04f 0500 	mov.w	r5, #0
 8004170:	00dd      	lsls	r5, r3, #3
 8004172:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004176:	00d4      	lsls	r4, r2, #3
 8004178:	4622      	mov	r2, r4
 800417a:	462b      	mov	r3, r5
 800417c:	1814      	adds	r4, r2, r0
 800417e:	653c      	str	r4, [r7, #80]	; 0x50
 8004180:	414b      	adcs	r3, r1
 8004182:	657b      	str	r3, [r7, #84]	; 0x54
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	461a      	mov	r2, r3
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	1891      	adds	r1, r2, r2
 8004190:	61b9      	str	r1, [r7, #24]
 8004192:	415b      	adcs	r3, r3
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800419a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800419e:	f7fc fc99 	bl	8000ad4 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4b6c      	ldr	r3, [pc, #432]	; (8004358 <UART_SetConfig+0x38c>)
 80041a8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	2164      	movs	r1, #100	; 0x64
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	3332      	adds	r3, #50	; 0x32
 80041ba:	4a67      	ldr	r2, [pc, #412]	; (8004358 <UART_SetConfig+0x38c>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	f003 0207 	and.w	r2, r3, #7
 80041c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4432      	add	r2, r6
 80041cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041ce:	e0b9      	b.n	8004344 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d2:	461c      	mov	r4, r3
 80041d4:	f04f 0500 	mov.w	r5, #0
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	1891      	adds	r1, r2, r2
 80041de:	6139      	str	r1, [r7, #16]
 80041e0:	415b      	adcs	r3, r3
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041e8:	1912      	adds	r2, r2, r4
 80041ea:	eb45 0303 	adc.w	r3, r5, r3
 80041ee:	f04f 0000 	mov.w	r0, #0
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	00d9      	lsls	r1, r3, #3
 80041f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041fc:	00d0      	lsls	r0, r2, #3
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	eb12 0804 	adds.w	r8, r2, r4
 8004206:	eb43 0905 	adc.w	r9, r3, r5
 800420a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4618      	mov	r0, r3
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	008b      	lsls	r3, r1, #2
 800421e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004222:	0082      	lsls	r2, r0, #2
 8004224:	4640      	mov	r0, r8
 8004226:	4649      	mov	r1, r9
 8004228:	f7fc fc54 	bl	8000ad4 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4b49      	ldr	r3, [pc, #292]	; (8004358 <UART_SetConfig+0x38c>)
 8004232:	fba3 2302 	umull	r2, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	011e      	lsls	r6, r3, #4
 800423a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423c:	4618      	mov	r0, r3
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	1894      	adds	r4, r2, r2
 8004248:	60bc      	str	r4, [r7, #8]
 800424a:	415b      	adcs	r3, r3
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004252:	1812      	adds	r2, r2, r0
 8004254:	eb41 0303 	adc.w	r3, r1, r3
 8004258:	f04f 0400 	mov.w	r4, #0
 800425c:	f04f 0500 	mov.w	r5, #0
 8004260:	00dd      	lsls	r5, r3, #3
 8004262:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004266:	00d4      	lsls	r4, r2, #3
 8004268:	4622      	mov	r2, r4
 800426a:	462b      	mov	r3, r5
 800426c:	1814      	adds	r4, r2, r0
 800426e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004270:	414b      	adcs	r3, r1
 8004272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4618      	mov	r0, r3
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	008b      	lsls	r3, r1, #2
 8004288:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800428c:	0082      	lsls	r2, r0, #2
 800428e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004292:	f7fc fc1f 	bl	8000ad4 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4b2f      	ldr	r3, [pc, #188]	; (8004358 <UART_SetConfig+0x38c>)
 800429c:	fba3 1302 	umull	r1, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	2164      	movs	r1, #100	; 0x64
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	3332      	adds	r3, #50	; 0x32
 80042ae:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <UART_SetConfig+0x38c>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ba:	441e      	add	r6, r3
 80042bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042be:	4618      	mov	r0, r3
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	1894      	adds	r4, r2, r2
 80042ca:	603c      	str	r4, [r7, #0]
 80042cc:	415b      	adcs	r3, r3
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d4:	1812      	adds	r2, r2, r0
 80042d6:	eb41 0303 	adc.w	r3, r1, r3
 80042da:	f04f 0400 	mov.w	r4, #0
 80042de:	f04f 0500 	mov.w	r5, #0
 80042e2:	00dd      	lsls	r5, r3, #3
 80042e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042e8:	00d4      	lsls	r4, r2, #3
 80042ea:	4622      	mov	r2, r4
 80042ec:	462b      	mov	r3, r5
 80042ee:	eb12 0a00 	adds.w	sl, r2, r0
 80042f2:	eb43 0b01 	adc.w	fp, r3, r1
 80042f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800430e:	0082      	lsls	r2, r0, #2
 8004310:	4650      	mov	r0, sl
 8004312:	4659      	mov	r1, fp
 8004314:	f7fc fbde 	bl	8000ad4 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <UART_SetConfig+0x38c>)
 800431e:	fba3 1302 	umull	r1, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2164      	movs	r1, #100	; 0x64
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	3332      	adds	r3, #50	; 0x32
 8004330:	4a09      	ldr	r2, [pc, #36]	; (8004358 <UART_SetConfig+0x38c>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4432      	add	r2, r6
 8004342:	609a      	str	r2, [r3, #8]
}
 8004344:	bf00      	nop
 8004346:	377c      	adds	r7, #124	; 0x7c
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434e:	bf00      	nop
 8004350:	40011000 	.word	0x40011000
 8004354:	40011400 	.word	0x40011400
 8004358:	51eb851f 	.word	0x51eb851f

0800435c <__libc_init_array>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	4d0d      	ldr	r5, [pc, #52]	; (8004394 <__libc_init_array+0x38>)
 8004360:	4c0d      	ldr	r4, [pc, #52]	; (8004398 <__libc_init_array+0x3c>)
 8004362:	1b64      	subs	r4, r4, r5
 8004364:	10a4      	asrs	r4, r4, #2
 8004366:	2600      	movs	r6, #0
 8004368:	42a6      	cmp	r6, r4
 800436a:	d109      	bne.n	8004380 <__libc_init_array+0x24>
 800436c:	4d0b      	ldr	r5, [pc, #44]	; (800439c <__libc_init_array+0x40>)
 800436e:	4c0c      	ldr	r4, [pc, #48]	; (80043a0 <__libc_init_array+0x44>)
 8004370:	f000 f820 	bl	80043b4 <_init>
 8004374:	1b64      	subs	r4, r4, r5
 8004376:	10a4      	asrs	r4, r4, #2
 8004378:	2600      	movs	r6, #0
 800437a:	42a6      	cmp	r6, r4
 800437c:	d105      	bne.n	800438a <__libc_init_array+0x2e>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	f855 3b04 	ldr.w	r3, [r5], #4
 8004384:	4798      	blx	r3
 8004386:	3601      	adds	r6, #1
 8004388:	e7ee      	b.n	8004368 <__libc_init_array+0xc>
 800438a:	f855 3b04 	ldr.w	r3, [r5], #4
 800438e:	4798      	blx	r3
 8004390:	3601      	adds	r6, #1
 8004392:	e7f2      	b.n	800437a <__libc_init_array+0x1e>
 8004394:	080043f0 	.word	0x080043f0
 8004398:	080043f0 	.word	0x080043f0
 800439c:	080043f0 	.word	0x080043f0
 80043a0:	080043f4 	.word	0x080043f4

080043a4 <memset>:
 80043a4:	4402      	add	r2, r0
 80043a6:	4603      	mov	r3, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
